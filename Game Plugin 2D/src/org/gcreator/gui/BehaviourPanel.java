/*
 * BehaviourPanel.java
 *
 * Created on 26 de Dezembro de 2008, 23:13
 */
package org.gcreator.gui;

import java.awt.Component;
import java.util.Vector;
import javax.swing.JPanel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import org.gcreator.events.Event;
import org.gcreator.events.EventPanel;
import org.gcreator.formats.BehaviorObject;

/**
 * Panel with all the events, fields, and stuff.
 * 
 * @author  Lu√≠s Reis
 */
public class BehaviourPanel extends JPanel implements Event.EventChangeListener {

    private static final long serialVersionUID = 1;
    public BehaviorObject bObj;
    public DocumentPane pane;
    public TableModel tableModel;

    /** 
     * Creates new form BehaviourPanel
     * 
     * @param obj The {@link BehaviorObject}.
     * @param pane The {@link DocumentPane} that this panel should belong to.
     */
    public BehaviourPanel(BehaviorObject obj, DocumentPane pane) {
        initComponents();
        bObj = obj;
        this.pane = pane;
        for (Event e : bObj.events) {
            this.addTabForEvent(e);
            e.addChangeListener(this);
        }
        eventList.setCellRenderer(new EventCellRenderer());
    }

    public void setModified(boolean b) {
        pane.setModified(b);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPane = new javax.swing.JTabbedPane();
        eventsTab = new javax.swing.JPanel();
        eventListScrollPane = new javax.swing.JScrollPane();
        eventList = new javax.swing.JList();
        eventButtonsPanel = new javax.swing.JPanel();
        newEventButton = new javax.swing.JButton();
        deleteEventButton = new javax.swing.JButton();
        fieldsTab = new javax.swing.JPanel();
        fieldButtonsPanel = new javax.swing.JPanel();
        addFieldButton = new javax.swing.JButton();
        removeFieldButton = new javax.swing.JButton();
        fieldsTabelScrollPane = new javax.swing.JScrollPane();
        fieldsTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        tabPane.setMinimumSize(new java.awt.Dimension(136, 183));
        tabPane.setPreferredSize(new java.awt.Dimension(136, 183));

        eventsTab.setLayout(new java.awt.BorderLayout());

        eventList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Create Event", "Update Event", "Draw Event", "Destroy Event", "Key Press Event", "Key Release Event" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        eventList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        eventList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                eventListValueChanged(evt);
            }
        });
        eventListScrollPane.setViewportView(eventList);

        eventsTab.add(eventListScrollPane, java.awt.BorderLayout.CENTER);

        eventButtonsPanel.setLayout(new java.awt.GridLayout(1, 0));

        newEventButton.setText("New...");
        newEventButton.setEnabled(false);
        newEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newEventButtonActionPerformed(evt);
            }
        });
        eventButtonsPanel.add(newEventButton);

        deleteEventButton.setText("Delete");
        deleteEventButton.setEnabled(false);
        deleteEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEventButtonActionPerformed(evt);
            }
        });
        eventButtonsPanel.add(deleteEventButton);

        eventsTab.add(eventButtonsPanel, java.awt.BorderLayout.SOUTH);

        tabPane.addTab("Events", eventsTab);

        fieldsTab.setLayout(new java.awt.BorderLayout());

        fieldButtonsPanel.setPreferredSize(new java.awt.Dimension(100, 32));
        fieldButtonsPanel.setLayout(new java.awt.GridLayout(1, 0));

        addFieldButton.setText("Add");
        addFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFieldButtonActionPerformed(evt);
            }
        });
        fieldButtonsPanel.add(addFieldButton);

        removeFieldButton.setText("Remove");
        removeFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFieldButtonActionPerformed(evt);
            }
        });
        fieldButtonsPanel.add(removeFieldButton);

        fieldsTab.add(fieldButtonsPanel, java.awt.BorderLayout.SOUTH);

        fieldsTable.setModel(tableModel = new FieldsTableModel());
        fieldsTabelScrollPane.setViewportView(fieldsTable);

        fieldsTab.add(fieldsTabelScrollPane, java.awt.BorderLayout.CENTER);

        tabPane.addTab("Fields", fieldsTab);

        add(tabPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="collapsed" desc="class FieldsTableModel">
    private class FieldsTableModel implements TableModel {

        private static final long serialVersionUID = 1;
        private Vector<TableModelListener> listeners = new Vector<TableModelListener>();
        
        public int getRowCount() {
            return bObj.fields.size();
        }

        public int getColumnCount() {
            /* Name | Type | Static | Final | Defualt Value */
            return 5;
        }

        @Override
        public String getColumnName(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return "Name";
                case 1:
                    return "Type";
                case 2:
                    return "Static";
                case 3:
                    return "Final";
                case 4:
                    return "Default Value";
                default:
                    return "Column " + columnIndex;
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return String.class;
                case 1:
                    return String.class;
                case 2:
                    return Boolean.class;
                case 3:
                    return Boolean.class;
                case 4:
                    return String.class;
                default:
                    return String.class;
            }
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return true;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return bObj.fields.get(rowIndex).getName();
                case 1:
                    return bObj.fields.get(rowIndex).getType();
                case 2:
                    return bObj.fields.get(rowIndex).isStatic();
                case 3:
                    return bObj.fields.get(rowIndex).isFinal();
                case 4:
                    return bObj.fields.get(rowIndex).getDefaultValue();
                default:
                    return String.class;
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    bObj.fields.get(rowIndex).setName((String) aValue);
                    return;
                case 1:
                    bObj.fields.get(rowIndex).setType((String) aValue);
                    return;
                case 2:
                    bObj.fields.get(rowIndex).setStatic((Boolean) aValue);
                    return;
                case 3:
                    bObj.fields.get(rowIndex).setFinal((Boolean) aValue);
                    return;
                case 4:
                    bObj.fields.get(rowIndex).setDefaultValue((String) aValue);
                    return;
            }
            TableModelEvent e = new TableModelEvent(this, rowIndex, rowIndex, columnIndex, TableModelEvent.UPDATE);
            for (TableModelListener l : listeners) {
                l.tableChanged(e);
            }
        }

        public void addTableModelListener(TableModelListener l) {
            listeners.add(l);
        }

        public void removeTableModelListener(TableModelListener l) {
            listeners.remove(l);
        }
    }
    //</editor-fold>
private void eventListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_eventListValueChanged
    if (bObj != null && eventList.getSelectedIndex() != -1) {
        for (Event e : bObj.events) {
            if (e.getType().equalsIgnoreCase(eventList.getSelectedValue().toString())) {
                newEventButton.setEnabled(false);
                deleteEventButton.setEnabled(true);
                return;
            }
        }
        newEventButton.setEnabled(true);
        deleteEventButton.setEnabled(false);
    }
}//GEN-LAST:event_eventListValueChanged

private void newEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newEventButtonActionPerformed
    Event e = new Event(eventList.getSelectedValue().toString());
    bObj.events.add(e);
    addTabForEvent(e);
    e.addChangeListener(this);
    eventList.setSelectedIndex(-1);
    newEventButton.setEnabled(false);
    deleteEventButton.setEnabled(true);
    this.setModified(true);
}//GEN-LAST:event_newEventButtonActionPerformed

private void deleteEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEventButtonActionPerformed
    if (eventList.getSelectedIndex() < 0) {
        return;
    }
    Component[] cs = tabPane.getComponents();
    @SuppressWarnings("unchecked")
    Vector<Event> evec = (Vector<Event>) bObj.events.clone();

    for (Event e : evec) {
        if (e.getType().equals(eventList.getSelectedValue())) {
            bObj.events.remove(e);
            break;
        }
    }
    for (Component c : cs) {
        if (c instanceof EventPanel) {
            EventPanel ev = (EventPanel) c;
            if (ev.getEvent().getType().equals(eventList.getSelectedValue())) {
                tabPane.remove(c);
                break;
            }
        }
    }
    eventList.updateUI();
    this.setModified(true);
    deleteEventButton.setEnabled(false);
}//GEN-LAST:event_deleteEventButtonActionPerformed

private void addFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFieldButtonActionPerformed
    bObj.fields.add(new BehaviorObject.Field("newField", "int"));
    fieldsTable.updateUI();
    this.setModified(true);
}//GEN-LAST:event_addFieldButtonActionPerformed

private void removeFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFieldButtonActionPerformed
    int[] rows = fieldsTable.getSelectedRows();
    for (int row = rows.length - 1; row >= 0; row--) {
        bObj.fields.remove(row);
    }
    fieldsTable.getSelectionModel().setSelectionInterval(-1, -1);
    fieldsTable.updateUI();
    this.setModified(true);
}//GEN-LAST:event_removeFieldButtonActionPerformed

    private void addTabForEvent(Event e) {
        EventPanel p = new EventPanel(e);
        int i = tabPane.getComponentCount() - 2;
        tabPane.insertTab(e.getType(), null, p, e.getType(), i);
        tabPane.setTabComponentAt(i, new EventTabRenderer(tabPane));
    }

    public void eventChanged(Event e) {
        setModified(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFieldButton;
    private javax.swing.JButton deleteEventButton;
    private javax.swing.JPanel eventButtonsPanel;
    private javax.swing.JList eventList;
    private javax.swing.JScrollPane eventListScrollPane;
    private javax.swing.JPanel eventsTab;
    private javax.swing.JPanel fieldButtonsPanel;
    private javax.swing.JPanel fieldsTab;
    private javax.swing.JScrollPane fieldsTabelScrollPane;
    private javax.swing.JTable fieldsTable;
    private javax.swing.JButton newEventButton;
    private javax.swing.JButton removeFieldButton;
    private javax.swing.JTabbedPane tabPane;
    // End of variables declaration//GEN-END:variables

}

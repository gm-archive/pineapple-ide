class Common{
    public this(){
        var a = [true, false, true].forEach(Common.redirectSecond(Common.not));// = [false, true, false]
        a = [0, "Hi!", "Hello"=>3].where(Common.isNumeric)// = [1, "Hi!"]; numeric keys, not values
        a = [1, "Hi!", "Hello"=>3].where(Common.redirectSecond(Common.isNumeric));// = [1, 3] numeric values, not keys
        a = ["A"=>1, "X"=>2, true=>3].forEach(Common.increment);// = ["A"=>2, "X"=>3, true=>4]
        a = 0xF01a.sign();
    }

    public static function isNumeric(var value){
        return value is number;
    }
    public static function isCharacter(var value){
        return value is char;
    }
    public static function isString(var value){
        return value is string;
    }
    public static function ofType(var type){
        return bool(value){
            return value is type;
        };
    }
    public static function atLeast(var value){
        return function(arg){
            return arg>=value;
        };
    }
    public static function not(var arg){
        return !arg;
    }
    public static function key(var key, var value, var index){
        return [index, key];
    }
    public static function value(var key, var value, var index){
        return [index, value];
    }
    public static function increment(var key, var value){
        return [key, value+1];
    }
    public static function redirectSecond(function a){
        return function(var b, var c){
            return a(c);
        };
    }
}
/* The following code was generated by JFlex 1.4.1 on 10/29/06 1:00 AM */

/*
 * 11/13/2004
 *
 * CSharpTokenMaker.java - An object that can take a chunk of text and return
 * a linked list of tokens representing it in the C# programming language.
 * Copyright (C) 2004 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * A lexer for the C# programming language.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated CSharpTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class CSharpTokenMaker extends AbstractJFlexTokenMaker implements TokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** lexical states */
  public static final int VERBATIMSTRING = 3;
  public static final int DOCUMENTCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int DELIMITEDCOMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\2\14\22\0\1\2\1\44\1\40\1\15"+
    "\1\0\1\44\1\45\1\36\2\52\1\4\1\31\1\53\1\12\1\35"+
    "\1\3\1\27\11\11\1\43\1\53\1\50\1\47\1\51\1\43\1\13"+
    "\3\26\1\34\1\32\1\34\5\10\1\25\1\33\7\10\1\7\2\10"+
    "\1\30\2\10\1\52\1\5\1\52\1\44\1\10\1\0\1\22\1\41"+
    "\1\62\1\54\1\20\1\21\1\61\1\64\1\55\1\70\1\63\1\23"+
    "\1\65\1\56\1\57\1\66\1\10\1\17\1\24\1\16\1\6\1\37"+
    "\1\60\1\42\1\67\1\71\1\52\1\46\1\52\1\43\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\2\5\2\6\1\7"+
    "\1\5\3\2\7\6\1\7\1\5\1\2\1\10\1\6"+
    "\1\11\1\6\5\5\1\12\11\6\1\1\1\13\2\1"+
    "\1\14\1\15\1\1\1\16\1\17\1\0\1\20\1\21"+
    "\5\6\1\22\1\7\1\22\1\23\1\7\1\0\1\24"+
    "\7\2\14\6\1\25\10\6\1\22\1\23\1\26\1\10"+
    "\1\27\2\6\2\11\1\30\4\6\2\25\21\6\1\31"+
    "\1\0\1\32\1\1\7\0\1\20\1\33\5\6\1\7"+
    "\1\23\1\0\7\2\1\34\1\2\17\6\1\25\10\6"+
    "\1\35\1\10\1\36\2\10\1\26\1\10\3\6\1\11"+
    "\1\37\3\11\7\6\1\40\20\6\10\0\1\6\1\40"+
    "\2\6\6\2\1\41\12\6\2\35\2\10\1\26\2\6"+
    "\2\11\16\6\6\0\3\2\10\6\1\35\2\10\1\26"+
    "\1\6\2\11\10\6\3\0\2\2\3\6\2\10\1\26"+
    "\1\11\5\6\2\0\1\2\3\6\1\0\1\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u0122\0\u032c"+
    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0122\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\u0122\0\u0122\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0122\0\u0984"+
    "\0\u09be\0\u0122\0\u09f8\0\u0a32\0\u0122\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0122\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\u0cb0\0\u0c3c\0\u0cea\0\u0570\0\u0122\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138"+
    "\0\u0244\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce"+
    "\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u0122\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u0122\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u0122\0\u09f8\0\u0122\0\u0122\0\u1a48\0\u1a82"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u0122\0\u1c18"+
    "\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u0c3c\0\u1d3a\0\u1d74\0\u1dae"+
    "\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e"+
    "\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e"+
    "\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee"+
    "\0\u2528\0\u2562\0\u0122\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684"+
    "\0\u26be\0\u26f8\0\u2732\0\u0122\0\u276c\0\u27a6\0\u27e0\0\u281a"+
    "\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea"+
    "\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba"+
    "\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a"+
    "\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a"+
    "\0\u0244\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0"+
    "\0\u312a\0\u0244\0\u3164\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286"+
    "\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456"+
    "\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626"+
    "\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6"+
    "\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6"+
    "\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96"+
    "\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u0c3c\0\u3cb8\0\u3cf2\0\u3d2c"+
    "\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc"+
    "\0\u3f36\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u40cc"+
    "\0\u4106\0\u4140\0\u417a\0\u41b4\0\u41ee\0\u4228\0\u4262\0\u429c"+
    "\0\u42d6\0\u4310\0\u434a\0\u4384\0\u43be\0\u43f8\0\u4432\0\u446c"+
    "\0\u44a6\0\u44e0\0\u451a\0\u4554";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\2\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\13\1\30\1\13\1\31"+
    "\3\13\1\32\1\33\1\34\1\35\1\36\1\13\1\37"+
    "\1\11\1\40\1\41\1\11\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\3\13"+
    "\1\55\3\13\1\56\1\57\2\56\1\60\65\56\1\61"+
    "\1\62\46\61\1\63\21\61\1\64\1\65\36\64\1\66"+
    "\31\64\1\5\4\0\5\5\1\0\1\5\1\0\14\5"+
    "\1\0\3\5\2\0\1\5\1\0\2\5\11\0\16\5"+
    "\74\0\1\7\12\0\1\67\57\0\1\70\1\71\42\0"+
    "\1\37\71\0\1\37\22\0\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\5\13\1\73\1\74\4\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\1\13"+
    "\1\75\1\76\13\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\77\4\0\1\77\2\100"+
    "\1\77\1\14\1\0\1\77\1\0\3\77\1\101\1\102"+
    "\1\77\1\103\1\77\1\103\1\77\1\14\1\77\1\0"+
    "\1\101\2\102\1\104\1\0\1\77\1\0\2\77\11\0"+
    "\1\102\10\77\1\102\4\77\12\0\1\37\34\0\1\37"+
    "\1\0\1\37\20\0\1\5\4\0\1\5\3\13\1\5"+
    "\1\0\1\5\1\0\1\5\11\13\1\5\1\13\1\0"+
    "\3\13\2\0\1\13\1\105\2\13\11\0\16\13\1\5"+
    "\1\0\1\67\2\0\1\5\1\106\3\5\1\0\1\5"+
    "\1\0\2\5\1\107\1\110\2\5\1\111\5\5\1\0"+
    "\3\5\2\0\1\5\1\0\2\5\11\0\1\112\1\113"+
    "\2\5\1\114\12\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\1\13\1\115\11\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\10\13\1\116\2\13\1\117"+
    "\2\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\2\13\1\120\10\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\5\13\1\121\5\13\1\0"+
    "\3\13\2\0\1\122\1\0\1\13\1\123\11\0\2\13"+
    "\1\124\13\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\4\13\1\125\1\126\5\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\1\13\1\127\1\13"+
    "\1\130\12\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\6\13\1\131\4\13\1\0\3\13\2\0"+
    "\1\13\1\0\1\132\1\13\11\0\16\13\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\3\13\1\133"+
    "\12\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\1\134\1\13\1\135\10\13\1\0\3\13\2\0"+
    "\1\13\1\0\1\136\1\13\11\0\1\13\1\137\2\13"+
    "\1\140\3\13\1\141\5\13\1\77\4\0\1\77\2\100"+
    "\1\77\1\14\1\0\1\77\1\0\3\77\1\101\1\102"+
    "\1\77\1\103\1\77\1\103\1\77\1\14\1\142\1\0"+
    "\1\101\2\102\1\104\1\0\1\77\1\0\1\77\1\142"+
    "\11\0\1\102\10\77\1\102\4\77\31\0\1\37\15\0"+
    "\1\37\33\0\1\143\15\0\1\143\42\0\1\144\1\0"+
    "\3\144\1\145\30\144\1\146\33\144\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\1\13\1\147\1\13"+
    "\1\150\12\13\1\35\1\151\3\35\1\152\32\35\1\153"+
    "\31\35\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\1\13\1\154\2\13\1\121\6\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\3\13\1\155\7\13"+
    "\1\156\2\13\45\0\1\37\1\0\1\37\70\0\2\37"+
    "\71\0\1\37\1\11\70\0\1\37\1\0\1\11\20\0"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\2\13\1\157\10\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\3\13\1\160\12\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\3\13\1\131\2\13"+
    "\1\131\4\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\2\13\1\161\6\13\1\162\4\13\1\5\4\0"+
    "\1\5\1\163\3\13\1\72\1\5\1\0\1\5\2\13"+
    "\1\164\1\13\1\165\6\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\1\166"+
    "\3\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\167\1\0\1\170\1\13\11\0\12\13\1\171"+
    "\3\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\13\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\10\13\1\172\5\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\3\13\1\173\12\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\4\13"+
    "\1\174\1\175\5\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\3\13\1\176\4\13\1\177\5\13\1\5"+
    "\4\0\1\5\1\200\3\13\1\72\1\5\1\0\1\5"+
    "\1\13\1\201\2\13\1\202\6\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\56\1\0\2\56"+
    "\1\0\65\56\3\0\1\203\66\0\1\61\1\0\46\61"+
    "\1\0\21\61\51\204\1\205\20\204\1\64\1\0\36\64"+
    "\1\0\31\64\40\0\1\206\33\0\1\67\3\0\1\207"+
    "\10\0\1\210\1\211\2\0\1\212\30\0\1\213\1\214"+
    "\2\0\1\215\11\0\3\216\1\217\66\216\6\0\5\72"+
    "\3\0\13\72\1\0\3\72\2\0\1\72\1\0\2\72"+
    "\11\0\16\72\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\3\13\1\220\12\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\1\13\1\221\6\13"+
    "\1\141\5\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\2\13\1\222\13\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\6\13\1\223\4\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\6\13"+
    "\1\224\7\13\1\77\4\0\5\77\1\0\1\77\1\0"+
    "\14\77\1\0\3\77\2\0\1\77\1\0\2\77\11\0"+
    "\17\77\4\0\5\77\1\0\1\77\1\0\6\77\1\225"+
    "\1\77\1\225\3\77\1\0\3\77\2\0\1\77\1\0"+
    "\2\77\11\0\17\77\4\0\4\77\1\226\1\227\1\77"+
    "\1\0\12\77\1\226\1\77\1\227\3\77\2\0\1\77"+
    "\1\0\2\77\11\0\17\77\4\0\1\77\2\225\2\77"+
    "\1\0\1\77\1\0\14\77\1\0\3\77\2\0\1\77"+
    "\1\0\2\77\11\0\16\77\1\5\4\0\5\5\1\0"+
    "\1\5\1\0\14\5\1\0\3\5\2\0\1\5\1\0"+
    "\2\5\11\0\2\5\1\230\14\5\4\0\5\5\1\0"+
    "\1\5\1\0\3\5\1\231\10\5\1\0\3\5\2\0"+
    "\1\5\1\0\2\5\11\0\17\5\4\0\5\5\1\0"+
    "\1\5\1\0\2\5\1\232\3\5\1\233\5\5\1\0"+
    "\3\5\2\0\1\5\1\0\2\5\11\0\2\5\1\234"+
    "\14\5\4\0\5\5\1\0\1\5\1\0\14\5\1\0"+
    "\3\5\2\0\1\5\1\0\2\5\11\0\1\5\1\235"+
    "\15\5\4\0\5\5\1\0\1\5\1\0\3\5\1\236"+
    "\10\5\1\0\3\5\2\0\1\5\1\0\2\5\11\0"+
    "\17\5\4\0\5\5\1\0\1\5\1\0\4\5\1\237"+
    "\7\5\1\0\3\5\2\0\1\5\1\0\2\5\11\0"+
    "\17\5\4\0\5\5\1\0\1\5\1\0\5\5\1\240"+
    "\6\5\1\0\3\5\2\0\1\5\1\0\2\5\11\0"+
    "\17\5\4\0\1\5\1\241\3\13\1\72\1\5\1\0"+
    "\1\5\13\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\13\13\1\131\2\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\1\13\1\242\11\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\1\13\1\243"+
    "\14\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\13\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\12\13\1\244\3\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\1\245\2\13\1\131\1\246"+
    "\6\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\6\13\1\247\4\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\2\13\1\250\10\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\1\251"+
    "\12\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\12\13\1\252\3\13\1\5\4\0\1\5\1\253\3\13"+
    "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\5\13\1\254\5\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\3\13\1\255\12\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\256\11\0\2\13\1\257\13\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\1\13"+
    "\1\260\11\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\6\13\1\261\4\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\2\13\1\262\3\13"+
    "\1\263\7\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\1\13\1\264\2\13\1\265\6\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\4\13"+
    "\1\266\6\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\13\13\1\156\2\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\15\13\1\244\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\1\13"+
    "\1\267\14\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\3\13\1\270\12\13\1\77\4\0\4\77"+
    "\1\271\1\0\1\77\1\0\3\77\3\271\3\77\2\271"+
    "\1\77\1\0\1\271\1\77\1\271\2\0\1\77\1\0"+
    "\1\271\1\77\11\0\1\271\5\77\1\271\10\77\4\0"+
    "\4\77\1\143\1\0\1\77\1\0\3\77\1\101\1\102"+
    "\5\77\1\143\1\77\1\0\1\101\2\102\2\0\1\77"+
    "\1\0\2\77\11\0\1\102\10\77\1\102\4\77\1\272"+
    "\1\0\34\272\1\273\34\272\1\0\3\272\1\144\1\274"+
    "\1\275\6\272\2\144\1\272\2\144\4\272\1\144\6\272"+
    "\1\276\3\144\1\277\13\272\1\144\13\272\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\1\13\1\300"+
    "\11\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\5\13\1\301\5\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\1\13\1\302\14\13\5\151\1\303"+
    "\32\151\1\304\32\151\1\0\3\151\1\35\1\305\1\306"+
    "\6\151\2\35\1\151\2\35\4\151\1\35\6\151\4\35"+
    "\1\307\13\151\1\35\13\151\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\2\13\1\310\10\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\3\13"+
    "\1\311\12\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\1\312\12\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\3\13\1\313\1\13\1\314"+
    "\5\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\6\13\1\315\7\13\1\5\4\0\1\5\1\316\3\13"+
    "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\1\317\12\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\12\13"+
    "\1\252\3\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\5\13\1\320\5\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\4\13\1\131\11\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\11\13\1\321\4\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\1\131\12\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\2\13\1\322\10\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\14\13\1\323\1\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\2\13\1\324\10\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\16\13\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\1\13\1\325"+
    "\14\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\1\326\12\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\1\327\5\13\1\247\4\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\4\13"+
    "\1\330\6\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\2\13\1\331\13\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\2\13\1\332\1\13"+
    "\1\333\6\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0"+
    "\1\334\1\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\1\13\1\335\1\13\1\336"+
    "\12\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\1\13\1\337\11\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\56\0\1\340\33\0\1\341"+
    "\70\0\1\342\3\0\1\343\32\0\1\344\70\0\1\345"+
    "\34\0\1\346\72\0\1\237\72\0\1\347\47\0\1\216"+
    "\1\0\70\216\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\2\13\1\262\13\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\2\13\1\350\13\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\1\351\12\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\4\13\1\352\6\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\10\13\1\353\5\13"+
    "\1\77\4\0\4\77\1\226\1\0\1\77\1\0\4\77"+
    "\1\102\5\77\1\226\1\77\1\0\1\77\2\102\2\0"+
    "\1\77\1\0\2\77\11\0\1\102\10\77\1\102\4\77"+
    "\11\0\1\226\15\0\1\226\42\0\1\5\4\0\5\5"+
    "\1\0\1\5\1\0\14\5\1\0\3\5\2\0\1\5"+
    "\1\0\2\5\11\0\1\354\16\5\4\0\5\5\1\0"+
    "\1\5\1\0\14\5\1\0\3\5\2\0\1\5\1\0"+
    "\2\5\11\0\5\5\1\355\11\5\4\0\5\5\1\0"+
    "\1\5\1\0\2\5\1\356\11\5\1\0\3\5\2\0"+
    "\1\5\1\0\2\5\11\0\17\5\4\0\5\5\1\0"+
    "\1\5\1\0\7\5\1\357\4\5\1\0\3\5\2\0"+
    "\1\5\1\0\2\5\11\0\1\5\1\113\15\5\4\0"+
    "\5\5\1\0\1\5\1\0\14\5\1\0\3\5\2\0"+
    "\1\5\1\0\2\5\11\0\1\360\16\5\4\0\5\5"+
    "\1\0\1\5\1\0\14\5\1\0\3\5\2\0\1\5"+
    "\1\0\2\5\11\0\2\5\1\357\14\5\4\0\5\5"+
    "\1\0\1\5\1\0\4\5\1\111\7\5\1\0\3\5"+
    "\2\0\1\5\1\0\2\5\11\0\16\5\1\237\1\0"+
    "\70\237\1\5\4\0\5\5\1\0\1\5\1\0\2\5"+
    "\1\361\11\5\1\0\3\5\2\0\1\5\1\0\2\5"+
    "\11\0\17\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\2\13\1\362\10\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\3\13\1\164\12\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\6\13"+
    "\1\131\4\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\2\13\1\363\10\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\1\364\3\13\1\72\1\5\1\0\1\5\13\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\1\365"+
    "\15\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\2\13\1\131\10\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\2\13\1\166\13\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\2\13"+
    "\1\364\10\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\5\13\1\366\5\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\11\13\1\131\4\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\6\13\1\241\4\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\4\13\1\222\6\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\16\13\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\2\13\1\302"+
    "\10\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\4\13\1\367\6\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\2\13\1\370\10\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\1\371"+
    "\12\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\13\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\5\13\1\351\10\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\7\13\1\131\6\13\1\5"+
    "\4\0\1\5\1\372\3\13\1\72\1\5\1\0\1\5"+
    "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\1\13\1\221\14\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\1\373\12\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\6\13\1\374\7\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\5\13"+
    "\1\256\5\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\1\327\12\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\1\13\1\222\11\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\77"+
    "\4\0\1\77\2\375\1\77\1\271\1\0\1\77\1\0"+
    "\3\77\3\271\1\376\1\77\1\376\2\271\1\77\1\0"+
    "\1\271\1\77\1\271\2\0\1\77\1\0\1\271\1\77"+
    "\11\0\1\271\5\77\1\271\7\77\1\272\1\0\34\272"+
    "\1\146\34\272\1\0\7\272\1\377\6\272\3\377\3\272"+
    "\2\377\2\272\1\377\1\272\1\377\1\272\1\146\2\272"+
    "\1\377\12\272\1\377\5\272\1\377\10\272\1\0\7\272"+
    "\1\u0100\6\272\3\u0100\3\272\2\u0100\2\272\1\u0100\1\272"+
    "\1\u0100\1\272\1\146\2\272\1\u0100\12\272\1\u0100\5\272"+
    "\1\u0100\7\272\36\0\1\273\33\0\1\272\1\0\7\272"+
    "\1\u0101\6\272\3\u0101\3\272\2\u0101\2\272\1\u0101\1\272"+
    "\1\u0101\1\272\1\146\2\272\1\u0101\12\272\1\u0101\5\272"+
    "\1\u0101\7\272\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\1\u0102\12\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\4\13\1\u0103\6\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\1\131"+
    "\15\13\1\151\1\0\75\151\1\303\3\151\1\u0104\6\151"+
    "\3\u0104\3\151\2\u0104\2\151\1\u0104\1\151\1\u0104\3\151"+
    "\1\304\1\u0104\12\151\1\u0104\5\151\1\u0104\14\151\1\303"+
    "\3\151\1\u0105\6\151\3\u0105\3\151\2\u0105\2\151\1\u0105"+
    "\1\151\1\u0105\3\151\1\304\1\u0105\12\151\1\u0105\5\151"+
    "\1\u0105\14\151\1\303\3\151\1\35\6\151\3\35\3\151"+
    "\2\35\2\151\1\35\1\151\1\35\3\151\1\304\1\35"+
    "\12\151\1\35\5\151\1\35\7\151\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\4\13\1\263\6\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\5\13\1\351\5\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\2\13\1\351\10\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\16\13\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\4\13\1\u0106"+
    "\6\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\2\13\1\u0107\10\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\1\13\1\u0108\14\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13"+
    "\1\0\3\13\2\0\1\13\1\0\1\u0109\1\13\11\0"+
    "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\2\13\1\u010a\10\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\5\13\1\131\5\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\2\13"+
    "\1\u010b\10\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\1\13\1\u010c\11\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\2\13\1\372\10\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\1\13\1\u010d\11\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\5\13\1\247\5\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\16\13\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\3\13\1\131"+
    "\12\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\13\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\6\13\1\u010e\7\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\6\13\1\243\4\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\1\u010f"+
    "\5\13\1\166\4\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\6\13\1\u0110\7\13\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\1\13\1\351"+
    "\11\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\16\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\5\13\1\373\5\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0"+
    "\1\u0111\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\1\u0112\12\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\4\13"+
    "\1\u0113\6\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\54\0\1\u0114\76\0\1\u0115\27\0\1\u0116"+
    "\76\0\1\u0117\30\0\1\214\70\0\1\u0118\73\0\1\u0117"+
    "\34\0\1\212\67\0\1\u0119\52\0\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\5\13\1\131\10\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\3\13\1\247\7\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\2\13\1\332\10\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\16\13\1\5\4\0"+
    "\5\5\1\0\1\5\1\0\3\5\1\113\10\5\1\0"+
    "\3\5\2\0\1\5\1\0\2\5\11\0\17\5\4\0"+
    "\5\5\1\0\1\5\1\0\14\5\1\0\3\5\2\0"+
    "\1\5\1\0\2\5\11\0\1\5\1\u011a\15\5\4\0"+
    "\5\5\1\0\1\5\1\0\14\5\1\0\3\5\2\0"+
    "\1\5\1\0\2\5\11\0\3\5\1\u011b\13\5\4\0"+
    "\5\5\1\0\1\5\1\0\3\5\1\237\10\5\1\0"+
    "\3\5\2\0\1\5\1\0\2\5\11\0\17\5\4\0"+
    "\5\5\1\0\1\5\1\0\2\5\1\107\11\5\1\0"+
    "\3\5\2\0\1\5\1\0\2\5\11\0\1\5\1\113"+
    "\15\5\4\0\5\5\1\0\1\5\1\0\14\5\1\0"+
    "\3\5\2\0\1\5\1\0\2\5\11\0\2\5\1\u011c"+
    "\14\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\3\13\1\u011d\12\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\1\13\1\u011e\11\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\16\13\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\3\13\1\u011f"+
    "\12\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\13\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\1\13\1\u0120\14\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\5\13\1\u0121\5\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\4\13"+
    "\1\327\6\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\1\13\1\u0122\11\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\6\13\1\166\7\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\1\13\1\u0123\14\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\7\13\1\u0124\6\13\1\77\4\0"+
    "\5\77\1\0\1\77\1\0\6\77\1\u0125\1\77\1\u0125"+
    "\3\77\1\0\3\77\2\0\1\77\1\0\2\77\11\0"+
    "\17\77\4\0\1\77\2\u0125\2\77\1\0\1\77\1\0"+
    "\14\77\1\0\3\77\2\0\1\77\1\0\2\77\11\0"+
    "\16\77\1\272\1\0\7\272\1\u0126\6\272\3\u0126\3\272"+
    "\2\u0126\2\272\1\u0126\1\272\1\u0126\1\272\1\146\2\272"+
    "\1\u0126\12\272\1\u0126\5\272\1\u0126\10\272\1\0\7\272"+
    "\1\u0127\6\272\3\u0127\3\272\2\u0127\2\272\1\u0127\1\272"+
    "\1\u0127\1\272\1\146\2\272\1\u0127\12\272\1\u0127\5\272"+
    "\1\u0127\10\272\1\0\7\272\1\u0128\6\272\3\u0128\3\272"+
    "\2\u0128\2\272\1\u0128\1\272\1\u0128\1\272\1\273\2\272"+
    "\1\u0128\12\272\1\u0128\5\272\1\u0128\7\272\1\5\4\0"+
    "\1\5\1\u0129\3\13\1\72\1\5\1\0\1\5\13\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\1\172\12\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\5\151\1\303\3\151\1\u012a\6\151\3\u012a"+
    "\3\151\2\u012a\2\151\1\u012a\1\151\1\u012a\3\151\1\304"+
    "\1\u012a\12\151\1\u012a\5\151\1\u012a\14\151\1\303\3\151"+
    "\1\u012b\6\151\3\u012b\3\151\2\u012b\2\151\1\u012b\1\151"+
    "\1\u012b\3\151\1\304\1\u012b\12\151\1\u012b\5\151\1\u012b"+
    "\7\151\1\5\4\0\1\5\1\u012c\3\13\1\72\1\5"+
    "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\5\13\1\u0111\10\13\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\11\13\1\u0129"+
    "\4\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\5\13\1\312\5\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\1\13\1\u012d\11\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\6\13"+
    "\1\u012e\4\13\1\0\3\13\2\0\1\13\1\0\2\13"+
    "\11\0\16\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\1\13\1\u012f\11\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\4\13\1\u0130\6\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\10\13\1\131\5\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\1\13\1\u0131\14\13\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\7\13\1\256"+
    "\6\13\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\4\13\1\u0132\6\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\2\13\1\u0133\10\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\16\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\11\13"+
    "\1\243\4\13\20\0\1\214\126\0\1\u0134\73\0\1\u0135"+
    "\32\0\1\237\70\0\1\210\35\0\1\214\72\0\1\u0136"+
    "\13\0\1\5\4\0\5\5\1\0\1\5\1\0\14\5"+
    "\1\0\3\5\2\0\1\5\1\0\2\5\11\0\3\5"+
    "\1\u0137\13\5\4\0\5\5\1\0\1\5\1\0\2\5"+
    "\1\237\11\5\1\0\3\5\2\0\1\5\1\0\2\5"+
    "\11\0\17\5\4\0\5\5\1\0\1\5\1\0\14\5"+
    "\1\0\3\5\2\0\1\5\1\0\2\5\11\0\1\5"+
    "\1\u0138\15\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\3\13\1\131\7\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\2\13\1\131\13\13\1\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\2\13"+
    "\1\u0121\13\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\6\13\1\u0139\7\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\5\13\1\u013a\5\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\4\13\1\372\6\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\6\13\1\131\7\13\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\4\13\1\u013b"+
    "\6\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\16\13\1\272\1\0\7\272\1\u013c\6\272\3\u013c\3\272"+
    "\2\u013c\2\272\1\u013c\1\272\1\u013c\1\272\1\146\2\272"+
    "\1\u013c\12\272\1\u013c\5\272\1\u013c\10\272\1\0\7\272"+
    "\1\u013d\6\272\3\u013d\3\272\2\u013d\2\272\1\u013d\1\272"+
    "\1\u013d\1\272\1\146\2\272\1\u013d\12\272\1\u013d\5\272"+
    "\1\u013d\10\272\1\0\7\272\1\u013e\6\272\3\u013e\3\272"+
    "\2\u013e\2\272\1\u013e\1\272\1\u013e\1\272\1\273\2\272"+
    "\1\u013e\12\272\1\u013e\5\272\1\u013e\7\272\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\4\13\1\320"+
    "\6\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\16\13\5\151\1\303\3\151\1\307\6\151\3\307\3\151"+
    "\2\307\2\151\1\307\1\151\1\307\3\151\1\304\1\307"+
    "\12\151\1\307\5\151\1\307\14\151\1\303\3\151\1\u013f"+
    "\6\151\3\u013f\3\151\2\u013f\2\151\1\u013f\1\151\1\u013f"+
    "\3\151\1\304\1\u013f\12\151\1\u013f\5\151\1\u013f\7\151"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\5\13\1\166\5\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\3\13\1\u0140\7\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\2\13\1\u0129\13\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\12\13\1\u0140\3\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\13\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\1\13\1\u0141\14\13\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\1\u0142\12\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\13\13\1\0\3\13\2\0\1\13\1\0\2\13\11\0"+
    "\2\13\1\u0143\13\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\1\247\12\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\6\13\1\u0144\7\13"+
    "\57\0\1\u0145\31\0\1\237\127\0\1\u0146\14\0\1\5"+
    "\4\0\5\5\1\0\1\5\1\0\14\5\1\0\3\5"+
    "\2\0\1\5\1\0\2\5\11\0\2\5\1\237\14\5"+
    "\4\0\5\5\1\0\1\5\1\0\14\5\1\0\3\5"+
    "\2\0\1\5\1\0\2\5\11\0\2\5\1\u0147\14\5"+
    "\4\0\1\5\4\13\1\72\1\5\1\0\1\5\13\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\1\13"+
    "\1\166\14\13\1\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\13\13\1\131\2\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\5\13\1\u0148\5\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\11\0\16\13"+
    "\1\272\1\0\7\272\1\144\6\272\3\144\3\272\2\144"+
    "\2\272\1\144\1\272\1\144\1\272\1\146\2\272\1\144"+
    "\12\272\1\144\5\272\1\144\10\272\1\0\7\272\1\274"+
    "\6\272\3\274\3\272\2\274\2\272\1\274\1\272\1\274"+
    "\1\272\1\146\2\272\1\274\12\272\1\274\5\272\1\274"+
    "\10\272\1\0\7\272\1\144\6\272\3\144\3\272\2\144"+
    "\2\272\1\144\1\272\1\144\1\272\1\273\2\272\1\144"+
    "\12\272\1\144\5\272\1\144\7\272\5\151\1\303\3\151"+
    "\1\305\6\151\3\305\3\151\2\305\2\151\1\305\1\151"+
    "\1\305\3\151\1\304\1\305\12\151\1\305\5\151\1\305"+
    "\7\151\1\5\4\0\1\5\4\13\1\72\1\5\1\0"+
    "\1\5\4\13\1\u0149\6\13\1\0\3\13\2\0\1\13"+
    "\1\0\2\13\11\0\16\13\1\5\4\0\1\5\4\13"+
    "\1\72\1\5\1\0\1\5\13\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\1\247\15\13\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\3\13\1\u014a"+
    "\12\13\1\5\4\0\1\5\1\247\3\13\1\72\1\5"+
    "\1\0\1\5\13\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\16\13\1\5\4\0\1\5\4\13\1\72"+
    "\1\5\1\0\1\5\1\256\12\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\56\0\1\237\71\0"+
    "\1\u014b\13\0\1\5\4\0\5\5\1\0\1\5\1\0"+
    "\14\5\1\0\3\5\2\0\1\5\1\0\2\5\11\0"+
    "\5\5\1\237\11\5\4\0\1\5\4\13\1\72\1\5"+
    "\1\0\1\5\5\13\1\u014c\5\13\1\0\3\13\2\0"+
    "\1\13\1\0\2\13\11\0\16\13\1\5\4\0\1\5"+
    "\4\13\1\72\1\5\1\0\1\5\13\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\11\0\6\13\1\247\7\13"+
    "\1\5\4\0\1\5\4\13\1\72\1\5\1\0\1\5"+
    "\1\13\1\131\11\13\1\0\3\13\2\0\1\13\1\0"+
    "\2\13\11\0\16\13\61\0\1\237\10\0\1\5\4\0"+
    "\1\5\4\13\1\72\1\5\1\0\1\5\13\13\1\0"+
    "\3\13\2\0\1\13\1\0\2\13\11\0\3\13\1\u0123"+
    "\12\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17806];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\1\1\11\10\1\1\11\17\1\1\11\4\1"+
    "\2\11\11\1\1\11\2\1\1\11\2\1\1\11\1\1"+
    "\1\0\1\1\1\11\12\1\1\0\1\11\40\1\1\11"+
    "\4\1\1\11\27\1\1\11\1\0\2\11\7\0\1\1"+
    "\1\11\7\1\1\0\43\1\1\11\10\1\1\11\33\1"+
    "\10\0\54\1\6\0\32\1\3\0\16\1\2\0\4\1"+
    "\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public CSharpTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = VERBATIMSTRING;
				start = text.offset;
				break;
			case Token.COMMENT_MULTILINE:
				state = DELIMITEDCOMMENT;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CSharpTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CSharpTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { addToken(Token.PREPROCESSOR);
          }
        case 34: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 35: break;
        case 30: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 36: break;
        case 25: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 37: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 38: break;
        case 29: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 39: break;
        case 22: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 40: break;
        case 31: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 41: break;
        case 19: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 42: break;
        case 21: 
          { addToken(Token.RESERVED_WORD);
          }
        case 43: break;
        case 10: 
          { addToken(Token.SEPARATOR);
          }
        case 44: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addNullToken(); return firstToken;
          }
        case 45: break;
        case 6: 
          { addToken(Token.IDENTIFIER);
          }
        case 46: break;
        case 13: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzEndRead, Token.PREPROCESSOR); addNullToken(); return firstToken;
          }
        case 47: break;
        case 8: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 48: break;
        case 9: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 49: break;
        case 32: 
          { addToken(Token.DATA_TYPE);
          }
        case 50: break;
        case 2: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 51: break;
        case 23: 
          { addToken(Token.ERROR_CHAR);
          }
        case 52: break;
        case 33: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 53: break;
        case 20: 
          { start = zzMarkedPos-2; yybegin(VERBATIMSTRING);
          }
        case 54: break;
        case 24: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 55: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
          }
        case 56: break;
        case 16: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 57: break;
        case 18: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 58: break;
        case 27: 
          { start = zzMarkedPos-3; yybegin(DOCUMENTCOMMENT);
          }
        case 59: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(DELIMITEDCOMMENT);
          }
        case 60: break;
        case 7: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 61: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 62: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.PREPROCESSOR); start = zzMarkedPos;
          }
        case 63: break;
        case 15: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 64: break;
        case 1: 
          { 
          }
        case 65: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 66: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case VERBATIMSTRING: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 333: break;
            case DOCUMENTCOMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addNullToken(); return firstToken;
            }
            case 334: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 335: break;
            case DELIMITEDCOMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 336: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

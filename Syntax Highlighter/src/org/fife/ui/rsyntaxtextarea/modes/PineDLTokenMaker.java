/* The following code was generated by JFlex 1.4.1 on 08/11/08 3:48 PM */

/*
 * 11/13/2004
 *
 * PineDLTokenMaker.java - Scanner for the PineDL programming language.
 * Copyright (C) 2004 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 * 
 * Modified by Serge Humphrey 11/7/2008
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the PineDL programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated PineDLTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @author Serge Humphrey
 * 
 * @version 0.5
 *
 */

public class PineDLTokenMaker extends AbstractJFlexTokenMaker implements TokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DOCCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\7\1\0\1\21\1\16\22\0\1\21\1\46\1\14"+
    "\1\0\1\20\1\46\1\51\1\6\2\41\1\23\1\43\1\42\1\31"+
    "\1\32\1\22\1\3\3\15\4\5\2\2\1\52\1\42\1\44\1\45"+
    "\1\47\1\50\1\73\1\74\1\4\1\75\1\64\1\30\1\26\5\1"+
    "\1\25\1\100\1\77\1\1\1\76\1\1\1\71\1\101\1\102\1\1"+
    "\1\103\1\104\1\24\2\1\1\41\1\10\1\41\1\46\1\17\1\0"+
    "\1\36\1\13\1\60\1\56\1\35\1\27\1\67\1\54\1\62\1\1"+
    "\1\72\1\37\1\63\1\12\1\55\1\57\1\1\1\34\1\40\1\33"+
    "\1\11\1\66\1\65\1\61\1\70\1\1\1\105\1\46\1\106\1\53"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\3\2\1\6"+
    "\1\1\1\7\2\10\2\2\1\10\7\2\1\11\1\2"+
    "\5\10\10\2\1\12\10\2\1\13\1\14\5\13\1\15"+
    "\7\13\1\1\1\16\1\3\1\17\1\16\1\17\1\16"+
    "\1\20\1\16\1\4\1\21\1\0\1\4\7\2\2\6"+
    "\1\22\1\23\1\24\20\2\1\0\1\10\1\2\1\25"+
    "\10\2\1\25\5\2\1\12\11\2\1\26\3\0\1\27"+
    "\3\0\1\30\16\0\1\1\1\17\1\0\2\20\1\4"+
    "\1\31\2\4\1\21\1\4\6\2\1\6\1\32\1\6"+
    "\1\33\32\2\1\34\6\2\1\1\10\2\27\0\1\1"+
    "\1\4\1\34\2\2\1\6\1\35\2\2\1\36\22\2"+
    "\1\1\3\2\1\37\3\2\14\0\1\40\15\0\1\1"+
    "\1\4\1\6\1\2\2\25\16\2\1\1\3\2\1\0"+
    "\1\41\1\0\1\42\27\0\1\1\1\4\1\6\12\2"+
    "\1\1\2\2\22\0\6\2\1\1\2\2\2\0\1\40"+
    "\6\0\6\2\11\0\5\2\5\0\4\2\5\0\3\2"+
    "\2\0\10\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[456];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u0238\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u06ef\0\u0238\0\u0238\0\u0736\0\u077d\0\u07c4"+
    "\0\u0238\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed"+
    "\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0238\0\u0d50\0\u0d97\0\u0dde"+
    "\0\u0e25\0\u0e6c\0\u0238\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u10eb\0\u10eb\0\u1132\0\u1179"+
    "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u0238\0\u12dc\0\u1323\0\u136a"+
    "\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2"+
    "\0\u0238\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793"+
    "\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb"+
    "\0\u1a12\0\u1a59\0\u1aa0\0\u0429\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc"+
    "\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u011c"+
    "\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u0238"+
    "\0\u221d\0\u0d97\0\u2264\0\u0238\0\u22ab\0\u22f2\0\u2339\0\u0238"+
    "\0\u0efa\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a"+
    "\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762"+
    "\0\u27a9\0\u10eb\0\u27f0\0\u2837\0\u0238\0\u287e\0\u28c5\0\u12dc"+
    "\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd"+
    "\0\u0238\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee"+
    "\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26"+
    "\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e"+
    "\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396"+
    "\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce"+
    "\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806"+
    "\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e"+
    "\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76"+
    "\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u011c\0\u3e67"+
    "\0\u3eae\0\u3ef5\0\u0238\0\u3f3c\0\u3f83\0\u011c\0\u3fca\0\u4011"+
    "\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202\0\u4249"+
    "\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u43f3\0\u443a\0\u4481"+
    "\0\u44c8\0\u450f\0\u4556\0\u459d\0\u011c\0\u45e4\0\u462b\0\u4672"+
    "\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa"+
    "\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u0238\0\u4a0d\0\u4a54\0\u4a9b"+
    "\0\u4ae2\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c\0\u4cd3"+
    "\0\u4d1a\0\u4d61\0\u4da8\0\u4def\0\u4e36\0\u4e7d\0\u4ec4\0\u2d7c"+
    "\0\u4f0b\0\u4f52\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u50b5\0\u50fc"+
    "\0\u5143\0\u518a\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u52ed\0\u5334"+
    "\0\u537b\0\u53c2\0\u5409\0\u4700\0\u5450\0\u478e\0\u5497\0\u54de"+
    "\0\u5525\0\u556c\0\u55b3\0\u55fa\0\u5641\0\u5688\0\u56cf\0\u5716"+
    "\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u5907\0\u594e"+
    "\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1\0\u5af8\0\u5b3f\0\u5b86"+
    "\0\u5bcd\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9\0\u5d30\0\u5d77\0\u5dbe"+
    "\0\u5e05\0\u5e4c\0\u5e93\0\u5eda\0\u5f21\0\u5f68\0\u5faf\0\u5ff6"+
    "\0\u603d\0\u6084\0\u60cb\0\u6112\0\u6159\0\u61a0\0\u61e7\0\u622e"+
    "\0\u6275\0\u62bc\0\u6303\0\u634a\0\u6391\0\u63d8\0\u641f\0\u6466"+
    "\0\u64ad\0\u64f4\0\u653b\0\u6582\0\u65c9\0\u6610\0\u6657\0\u669e"+
    "\0\u66e5\0\u672c\0\u6773\0\u67ba\0\u6801\0\u6848\0\u688f\0\u68d6"+
    "\0\u691d\0\u6964\0\u69ab\0\u69f2\0\u6a39\0\u6a80\0\u6ac7\0\u6b0e"+
    "\0\u6b55\0\u6b9c\0\u6be3\0\u6c2a\0\u6c71\0\u6cb8\0\u6cff\0\u6d46"+
    "\0\u6d8d\0\u6dd4\0\u6e1b\0\u6e62\0\u6ea9\0\u6ef0\0\u6f37\0\u6f7e"+
    "\0\u6fc5\0\u700c\0\u7053\0\u709a\0\u70e1\0\u7128\0\u716f\0\u71b6"+
    "\0\u71fd\0\u7244\0\u728b\0\u72d2\0\u7319\0\u7360\0\u73a7\0\u73ee"+
    "\0\u7435\0\u747c\0\u74c3\0\u750a\0\u7551\0\u7598\0\u75df\0\u7626";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[456];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\5\1\6\1\10\1\11"+
    "\1\4\1\12\1\13\1\14\1\15\1\6\1\16\2\5"+
    "\1\17\1\20\1\21\2\5\1\22\1\23\1\5\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\21\1\40\1\41\1\42\2\41"+
    "\2\5\1\43\1\44\1\45\1\5\1\46\1\5\1\47"+
    "\1\50\1\51\1\52\3\5\1\53\1\54\1\55\1\5"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\2\34\7\64"+
    "\1\65\13\64\1\66\3\64\1\67\24\64\1\70\10\64"+
    "\1\71\21\64\7\72\1\73\13\72\1\74\3\72\1\75"+
    "\14\72\1\76\7\72\1\77\10\72\1\100\5\72\1\101"+
    "\11\72\1\102\1\72\6\4\2\0\4\4\1\0\1\4"+
    "\1\0\2\4\3\0\5\4\2\0\6\4\13\0\31\4"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\17\5"+
    "\1\4\11\5\2\0\2\104\2\6\1\104\1\6\2\0"+
    "\4\104\1\0\1\6\1\0\2\104\3\0\1\104\1\105"+
    "\2\106\1\107\1\0\1\110\2\104\1\107\1\104\1\105"+
    "\1\104\13\0\2\104\1\106\5\104\1\106\20\104\2\0"+
    "\2\104\1\111\1\112\1\104\1\112\2\0\4\104\1\0"+
    "\1\112\1\0\2\104\3\0\1\113\1\105\2\106\1\107"+
    "\1\0\1\110\2\104\1\107\1\104\1\105\1\104\13\0"+
    "\2\104\1\106\2\104\1\113\2\104\1\106\20\104\2\0"+
    "\6\114\1\115\1\116\1\117\76\114\107\0\1\4\5\5"+
    "\2\0\1\103\1\5\1\120\1\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\6\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\1\121\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\2\5"+
    "\1\122\1\123\2\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\1\5\1\124\4\5\13\0"+
    "\1\5\1\125\12\5\1\126\2\5\1\4\11\5\2\0"+
    "\7\15\1\127\1\130\3\15\1\131\72\15\21\0\1\17"+
    "\107\0\1\132\1\133\21\0\1\41\106\0\1\41\41\0"+
    "\1\4\5\5\2\0\1\103\1\134\2\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\3\5"+
    "\1\135\1\136\1\5\13\0\1\5\1\137\4\5\1\140"+
    "\10\5\1\4\11\5\33\0\1\41\13\0\1\41\43\0"+
    "\2\110\1\0\1\110\7\0\1\110\71\0\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\1\5\1\141\4\5\13\0\1\142\16\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\2\5"+
    "\1\143\3\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\4\5\1\144\1\5\13\0\5\5"+
    "\1\145\11\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\2\5\1\146\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\6\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\6\5\13\0\1\5\1\147"+
    "\15\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\1\150\2\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\1\151\5\5\13\0\1\152\10\5\1\153\5\5"+
    "\1\4\11\5\45\0\1\41\1\0\1\41\105\0\1\154"+
    "\1\41\106\0\1\41\1\0\1\155\104\0\1\41\3\0"+
    "\1\41\35\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\2\5\1\156"+
    "\3\5\13\0\1\5\1\157\15\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\1\160\2\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\1\5\1\161\1\5"+
    "\1\162\2\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\3\5\1\163\1\164\1\5\13\0"+
    "\1\165\1\166\15\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\1\5\1\167\1\5\1\0\1\5\1\0"+
    "\2\5\3\0\3\5\1\170\1\5\2\0\6\5\13\0"+
    "\7\5\1\171\7\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\1\5\1\172\4\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\6\5\13\0"+
    "\1\173\16\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\1\5\1\174\15\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\1\5"+
    "\1\175\15\5\1\4\11\5\2\0\1\4\1\176\2\4"+
    "\1\176\1\4\2\0\1\4\3\176\1\0\1\4\1\0"+
    "\2\176\3\0\5\176\2\0\6\176\13\0\17\176\1\4"+
    "\11\176\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\6\5\13\0"+
    "\3\5\1\177\1\200\12\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\1\5\1\201\15\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\3\5"+
    "\1\202\2\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\3\5\1\203\2\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\4\5\1\204\12\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\2\5\1\205\3\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\6\5\1\206\10\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\6\5\1\207\10\5"+
    "\1\4\11\5\2\0\7\64\1\0\13\64\1\0\3\64"+
    "\1\0\24\64\1\0\10\64\1\0\21\64\22\0\1\210"+
    "\117\0\1\211\106\0\1\212\140\0\1\213\21\0\7\72"+
    "\1\0\13\72\1\0\3\72\1\0\14\72\1\0\7\72"+
    "\1\0\10\72\1\0\5\72\1\0\11\72\1\0\1\72"+
    "\22\0\1\214\117\0\1\215\54\0\1\216\2\0\1\216"+
    "\4\0\3\216\6\0\1\217\1\0\5\216\2\0\6\216"+
    "\6\0\1\220\4\0\17\216\1\0\11\216\35\0\1\221"+
    "\140\0\1\222\54\0\1\223\1\224\1\225\1\226\1\0"+
    "\1\227\14\0\1\230\1\231\1\232\1\233\1\0\1\234"+
    "\3\0\1\235\113\0\1\236\13\0\6\4\2\0\1\4"+
    "\1\237\2\4\1\0\1\4\1\0\2\4\3\0\5\4"+
    "\2\0\6\4\13\0\31\4\2\0\6\104\2\0\4\104"+
    "\1\0\1\104\1\0\2\104\3\0\5\104\2\0\6\104"+
    "\13\0\31\104\2\0\2\104\2\240\1\104\1\240\2\0"+
    "\4\104\1\0\1\240\1\0\2\104\3\0\5\104\1\241"+
    "\1\0\6\104\2\0\1\241\10\0\31\104\2\0\2\104"+
    "\2\110\1\104\1\110\2\0\4\104\1\0\1\110\1\0"+
    "\2\104\3\0\2\104\2\106\1\107\2\0\2\104\1\107"+
    "\3\104\13\0\2\104\1\106\5\104\1\106\20\104\2\0"+
    "\2\104\2\111\1\104\1\111\2\0\4\104\1\0\1\111"+
    "\1\0\2\104\3\0\2\104\2\106\1\107\1\0\1\110"+
    "\2\104\1\107\3\104\13\0\2\104\1\106\5\104\1\106"+
    "\20\104\2\0\2\104\1\111\1\112\1\104\1\112\2\0"+
    "\4\104\1\0\1\112\1\0\2\104\3\0\1\104\1\242"+
    "\2\106\1\107\1\0\1\110\2\104\1\107\1\104\1\242"+
    "\1\104\13\0\2\104\1\106\5\104\1\106\20\104\2\0"+
    "\2\104\4\243\2\0\3\104\1\243\1\0\1\243\1\0"+
    "\2\104\3\0\2\104\3\243\2\0\2\104\2\243\2\104"+
    "\13\0\2\104\1\243\1\104\1\243\3\104\1\243\7\104"+
    "\2\243\7\104\2\0\6\244\1\245\1\0\77\244\6\0"+
    "\1\245\100\0\3\244\1\246\1\244\1\247\1\250\1\0"+
    "\1\114\1\251\3\114\1\246\11\244\1\114\3\244\2\114"+
    "\52\244\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\6\5"+
    "\1\252\10\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\4\5\1\253\1\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\11\5"+
    "\1\170\5\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\1\254\5\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\2\5\1\255\3\5\13\0"+
    "\17\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\6\5\13\0\1\5\1\256\15\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\1\257\5\5\13\0\17\5"+
    "\1\4\11\5\2\0\10\127\1\260\3\127\1\261\75\127"+
    "\1\15\1\127\2\15\1\0\1\15\1\262\4\15\11\127"+
    "\1\15\3\127\2\15\52\127\7\132\1\0\77\132\23\0"+
    "\1\263\63\0\1\4\5\5\2\0\1\103\1\5\1\264"+
    "\1\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\6\5\13\0\17\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\4\5\1\265\1\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\6\5\13\0"+
    "\1\5\1\266\15\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\1\5\1\170\4\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\1\5\1\267"+
    "\1\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\6\5\13\0\17\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\1\270\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\14\5\1\170\2\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\1\5"+
    "\1\271\4\5\13\0\6\5\1\272\10\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\1\273\5\5\13\0"+
    "\17\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\5\5\1\274\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\1\275\5\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\5\5\1\276"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\1\5\1\277\1\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\3\5"+
    "\1\300\13\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\3\5\1\301\2\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\1\5"+
    "\1\302\15\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\6\5\1\303\10\5\1\4\11\5"+
    "\47\0\1\41\1\0\1\21\37\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\3\5"+
    "\1\304\1\5\2\0\6\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\1\305\2\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\6\5\13\0"+
    "\17\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\2\5\1\306\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\1\5\1\307\4\5"+
    "\1\310\10\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\4\5\1\311\12\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\1\312\4\5\1\274"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\3\5\1\313\2\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\3\5\1\314\2\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\1\5\1\315\1\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\1\316\4\5\1\317"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\3\5\1\320\13\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\3\5\1\321\2\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\6\5\1\322\10\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\6\5"+
    "\1\323\10\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\1\324\5\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\176\2\0\1\325\3\176\1\0\1\176\1\0"+
    "\2\176\3\0\5\176\2\0\6\176\13\0\17\176\1\4"+
    "\11\176\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\6\5\13\0"+
    "\3\5\1\326\13\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\1\327\5\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\4\5\1\327\1\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\1\330\5\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\1\331\5\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\2\5"+
    "\1\332\3\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\5\5\1\333\11\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\2\5"+
    "\1\334\3\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\1\5\1\335\1\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\17\5"+
    "\1\4\11\5\61\0\1\336\114\0\1\337\100\0\1\340"+
    "\27\0\47\216\1\220\37\216\1\0\1\216\2\0\1\216"+
    "\4\0\3\216\10\0\5\216\2\0\6\216\6\0\1\220"+
    "\4\0\17\216\1\0\11\216\67\0\1\341\32\0\1\342"+
    "\42\0\1\343\1\344\66\0\1\345\132\0\1\346\36\0"+
    "\1\347\132\0\1\350\24\0\1\351\37\0\1\352\130\0"+
    "\1\353\107\0\1\354\106\0\1\355\62\0\1\356\131\0"+
    "\1\357\110\0\1\360\16\0\1\361\1\0\1\362\1\0"+
    "\1\363\3\0\1\364\20\0\2\4\4\365\2\0\3\4"+
    "\1\365\1\0\1\365\1\0\2\4\3\0\2\4\3\365"+
    "\2\0\2\4\2\365\2\4\13\0\2\4\1\365\1\4"+
    "\1\365\3\4\1\365\7\4\2\365\7\4\2\0\2\104"+
    "\2\240\1\104\1\240\2\0\4\104\1\0\1\240\1\0"+
    "\2\104\3\0\2\104\2\106\1\104\2\0\6\104\13\0"+
    "\2\104\1\106\5\104\1\106\20\104\4\0\2\240\1\0"+
    "\1\240\7\0\1\240\71\0\2\104\4\243\2\0\3\104"+
    "\1\243\1\0\1\243\1\0\2\104\3\0\1\104\1\242"+
    "\3\243\2\0\2\104\2\243\1\242\1\104\13\0\2\104"+
    "\1\243\1\104\1\243\3\104\1\243\7\104\2\243\7\104"+
    "\2\0\6\244\1\115\1\0\102\244\1\247\1\244\1\247"+
    "\1\245\1\0\5\244\1\247\74\244\1\114\1\244\1\114"+
    "\1\245\1\0\5\244\1\114\73\244\4\366\1\115\1\0"+
    "\3\244\1\366\1\244\1\366\10\244\3\366\4\244\2\366"+
    "\17\244\1\366\1\244\1\366\3\244\1\366\7\244\2\366"+
    "\11\244\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\1\367\5\5\13\0"+
    "\17\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\4\5\1\170\1\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\6\5\13\0\6\5\1\370"+
    "\10\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\3\5\1\371\2\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\4\5\1\367\1\5\13\0"+
    "\17\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\2\5\1\367\3\5\13\0\17\5\1\4\11\5\2\0"+
    "\7\127\1\0\101\127\4\372\2\127\1\260\2\127\1\372"+
    "\1\261\1\372\10\127\3\372\4\127\2\372\17\127\1\372"+
    "\1\127\1\372\3\127\1\372\7\127\2\372\11\127\22\0"+
    "\1\373\64\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\6\5\13\0"+
    "\4\5\1\374\12\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\5\5\1\270\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\3\5\1\252\2\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\3\5\1\375\2\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\2\5\1\376\3\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\1\5\1\377\15\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\5\5\1\170\13\0"+
    "\17\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\1\u0100\2\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\2\5\1\170\3\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\2\5"+
    "\1\u0101\3\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\1\u0102\5\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\6\5\13\0"+
    "\13\5\1\367\3\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\2\5\1\137\3\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\1\u0103\5\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\1\5\1\252\4\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\1\312\5\5\13\0"+
    "\17\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\3\5\1\u0104\2\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\2\5\1\u0105\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\4\5"+
    "\1\u0103\1\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\1\u0106\5\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\6\5\13\0"+
    "\12\5\1\u0107\4\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\6\5\13\0\16\5\1\u0108\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\4\5"+
    "\1\u0109\12\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\5\5\1\272\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\1\5\1\367\4\5\13\0"+
    "\17\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\1\u010a\4\5\1\u010b\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\2\5\1\u010c\3\5\13\0"+
    "\17\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\1\u010d\5\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\4\5\1\u010e\1\5\13\0\1\5"+
    "\1\u010f\15\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\11\5\1\u0110\5\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\4\5\1\274\1\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\2\5\1\170\14\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\1\5"+
    "\1\170\15\5\1\4\11\5\2\0\6\4\2\0\1\4"+
    "\1\u0111\2\4\1\0\1\4\1\0\2\4\3\0\5\4"+
    "\2\0\6\4\13\0\31\4\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\4\5\1\u0112\1\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\1\5"+
    "\1\u0113\15\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\6\5\1\u0114\10\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\1\u0115"+
    "\16\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\1\5\1\u0116\1\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\6\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\1\u0117\5\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\11\5\1\u0115\5\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\2\5\1\u0118\14\5"+
    "\1\4\11\5\54\0\1\u0119\66\0\1\u011a\126\0\1\u011b"+
    "\66\0\1\u011c\107\0\1\u011d\107\0\1\u011e\130\0\1\u011f"+
    "\63\0\1\u0120\111\0\1\u0121\21\0\1\u0122\61\0\1\u0123"+
    "\107\0\1\u0124\1\u0125\63\0\1\u0126\134\0\1\u0127\125\0"+
    "\1\u0128\63\0\1\u0129\105\0\1\u012a\106\0\1\u012b\22\0"+
    "\1\u012c\64\0\1\u012d\134\0\1\u012e\101\0\1\u012f\106\0"+
    "\1\u0130\43\0\1\u0131\132\0\1\u0132\50\0\2\4\4\u0133"+
    "\2\0\3\4\1\u0133\1\0\1\u0133\1\0\2\4\3\0"+
    "\2\4\3\u0133\2\0\2\4\2\u0133\2\4\13\0\2\4"+
    "\1\u0133\1\4\1\u0133\3\4\1\u0133\7\4\2\u0133\7\4"+
    "\2\0\2\244\4\u0134\1\115\1\0\3\244\1\u0134\1\244"+
    "\1\u0134\10\244\3\u0134\4\244\2\u0134\17\244\1\u0134\1\244"+
    "\1\u0134\3\244\1\u0134\7\244\2\u0134\11\244\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\6\5\13\0\12\5\1\274\4\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\6\5\13\0"+
    "\16\5\1\170\1\4\11\5\2\0\2\127\4\u0135\2\127"+
    "\1\260\2\127\1\u0135\1\261\1\u0135\10\127\3\u0135\4\127"+
    "\2\u0135\17\127\1\u0135\1\127\1\u0135\3\127\1\u0135\7\127"+
    "\2\u0135\11\127\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\1\u0136\5\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\4\5\1\u0137\1\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\11\5"+
    "\1\u0138\5\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\1\5\1\u0139\4\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\1\5\1\u013a\1\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\1\5\1\u013b\4\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\6\5"+
    "\1\u013c\10\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\1\u013d\2\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\6\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\4\5\1\257\1\5\13\0"+
    "\17\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\2\5\1\u013e\3\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\3\5\1\u013f\2\5\13\0"+
    "\17\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\3\5\1\u0140\2\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\6\5\13\0\1\170\16\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\6\5\1\u0141\10\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\1\170\5\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\1\5\1\u0142"+
    "\4\5\13\0\17\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\3\5\1\u0143\2\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\2\5\1\u0144"+
    "\3\5\13\0\17\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\1\5\1\u010b\4\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\3\5\1\u0145"+
    "\2\5\13\0\6\5\1\u0146\10\5\1\4\11\5\2\0"+
    "\2\4\4\u0147\2\0\3\4\1\u0147\1\0\1\u0147\1\0"+
    "\2\4\3\0\2\4\3\u0147\2\0\2\4\2\u0147\2\4"+
    "\13\0\2\4\1\u0147\1\4\1\u0147\3\4\1\u0147\7\4"+
    "\2\u0147\7\4\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\6\5\1\u0148\10\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\1\5\1\u0115\4\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\12\5\1\u0149\4\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\2\5\1\u0115\3\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\1\u014a"+
    "\2\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\6\5\13\0\17\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\6\5\13\0\1\5\1\334\15\5\1\4"+
    "\11\5\24\0\1\u014b\65\0\5\u014c\3\0\3\u014c\1\0"+
    "\1\u014c\1\0\1\u014c\2\0\1\u014c\1\0\15\u014c\4\0"+
    "\1\u014c\2\0\3\u014c\1\0\31\u014c\24\0\1\u014d\65\0"+
    "\5\u014e\3\0\3\u014e\1\0\1\u014e\1\0\1\u014e\2\0"+
    "\1\u014e\1\0\15\u014e\4\0\1\u014e\2\0\3\u014e\1\0"+
    "\31\u014e\57\0\1\u014f\66\0\1\u0150\17\0\1\u0151\106\0"+
    "\1\u0125\42\0\1\u0152\160\0\1\u0153\60\0\1\u0154\1\0"+
    "\1\u0155\123\0\1\u0156\114\0\1\u0157\104\0\1\u0158\103\0"+
    "\1\u0159\65\0\1\u015a\110\0\1\u015b\105\0\1\u015c\106\0"+
    "\1\u015d\106\0\1\u015e\111\0\1\u015f\60\0\1\u0160\20\0"+
    "\1\u0161\133\0\1\u0162\104\0\1\u0163\104\0\1\u0164\71\0"+
    "\1\u0165\47\0\2\4\4\u0166\2\0\3\4\1\u0166\1\0"+
    "\1\u0166\1\0\2\4\3\0\2\4\3\u0166\2\0\2\4"+
    "\2\u0166\2\4\13\0\2\4\1\u0166\1\4\1\u0166\3\4"+
    "\1\u0166\7\4\2\u0166\7\4\2\0\2\244\4\u0167\1\115"+
    "\1\0\3\244\1\u0167\1\244\1\u0167\10\244\3\u0167\4\244"+
    "\2\u0167\17\244\1\u0167\1\244\1\u0167\3\244\1\u0167\7\244"+
    "\2\u0167\11\244\2\127\4\u0168\2\127\1\260\2\127\1\u0168"+
    "\1\261\1\u0168\10\127\3\u0168\4\127\2\u0168\17\127\1\u0168"+
    "\1\127\1\u0168\3\127\1\u0168\7\127\2\u0168\11\127\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\6\5\1\u0169\10\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\4\5"+
    "\1\u016a\1\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\1\5\1\170\1\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\2\5\1\272\14\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\3\5\1\u016b\2\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\4\5\1\170\12\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\4\5\1\u010b\1\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\4\5\1\u016c\12\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\1\274\5\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\6\5\13\0"+
    "\13\5\1\274\3\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\1\5\1\u016d\1\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\6\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\3\5\1\u016e\1\5\2\0"+
    "\6\5\13\0\17\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\1\5\1\u016f\1\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\6\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\6\5\13\0"+
    "\7\5\1\u0170\7\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\2\5\1\u0171\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\1\5\1\u0172\1\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\17\5\1\4\11\5\2\0\2\4\4\u0173\2\0"+
    "\3\4\1\u0173\1\0\1\u0173\1\0\2\4\3\0\2\4"+
    "\3\u0173\2\0\2\4\2\u0173\2\4\13\0\2\4\1\u0173"+
    "\1\4\1\u0173\3\4\1\u0173\7\4\2\u0173\7\4\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\6\5\13\0\4\5\1\u0174"+
    "\12\5\1\4\11\5\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\2\5\1\u0175\3\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\5\5\2\0\1\5\1\u0116\4\5\13\0"+
    "\17\5\1\4\11\5\24\0\1\u011a\106\0\1\u011c\120\0"+
    "\1\u0176\110\0\1\u0177\135\0\1\u0178\55\0\1\u0179\131\0"+
    "\1\u017a\106\0\1\u017b\40\0\1\u017c\152\0\1\u017d\67\0"+
    "\1\u017e\105\0\1\u0125\110\0\1\u017f\104\0\1\u0180\134\0"+
    "\1\u0125\112\0\1\u0181\53\0\1\u0182\133\0\1\u0125\107\0"+
    "\1\u0183\116\0\1\u0184\51\0\1\u0185\142\0\1\u0186\52\0"+
    "\1\u0184\106\0\1\u0187\62\0\1\u0163\75\0\2\4\4\5"+
    "\2\0\3\4\1\5\1\0\1\5\1\0\2\4\3\0"+
    "\2\4\3\5\2\0\2\4\2\5\2\4\13\0\2\4"+
    "\1\5\1\4\1\5\3\4\1\5\7\4\2\5\7\4"+
    "\2\0\2\244\4\114\1\115\1\0\3\244\1\114\1\244"+
    "\1\114\10\244\3\114\4\244\2\114\17\244\1\114\1\244"+
    "\1\114\3\244\1\114\7\244\2\114\11\244\2\127\4\15"+
    "\2\127\1\260\2\127\1\15\1\261\1\15\10\127\3\15"+
    "\4\127\2\15\17\127\1\15\1\127\1\15\3\127\1\15"+
    "\7\127\2\15\11\127\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\1\5\1\u0188\15\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\14\5\1\170\2\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\4\5\1\u010b\12\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\1\u0189\5\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\1\274\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\3\5\1\u018a\2\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\4\5"+
    "\1\u018b\12\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\2\5\1\u018c\3\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\4\5\1\u0116\1\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\13\5\1\u018d\3\5\1\4\11\5"+
    "\2\0\2\4\4\u018e\2\0\3\4\1\u018e\1\0\1\u018e"+
    "\1\0\2\4\3\0\2\4\3\u018e\2\0\2\4\2\u018e"+
    "\2\4\13\0\2\4\1\u018e\1\4\1\u018e\3\4\1\u018e"+
    "\7\4\2\u018e\7\4\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\3\5\1\u018f\2\5\13\0\17\5\1\4\11\5\2\0"+
    "\1\4\5\5\2\0\1\103\3\5\1\0\1\5\1\0"+
    "\2\5\3\0\1\5\1\u0190\3\5\2\0\6\5\13\0"+
    "\17\5\1\4\11\5\64\0\1\u0191\102\0\1\u0192\70\0"+
    "\1\u0125\60\0\1\u0125\133\0\1\u0158\102\0\1\u015f\131\0"+
    "\1\u0158\64\0\1\u0125\111\0\1\u0193\104\0\1\u0194\131\0"+
    "\1\u0195\103\0\1\u0196\43\0\1\u0191\151\0\1\u0179\31\0"+
    "\106\u0184\1\u0125\34\0\1\u0197\127\0\1\u0198\65\0\1\u0199"+
    "\52\0\1\4\5\5\2\0\1\103\1\5\1\u019a\1\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\2\5\1\323\3\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\4\5"+
    "\1\274\12\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\2\5\1\u019b\3\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\1\5\1\u019c\1\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\17\5\1\4\2\5\1\u019d\6\5"+
    "\2\0\2\4\4\176\2\0\3\4\1\176\1\0\1\176"+
    "\1\0\2\4\3\0\2\4\3\176\2\0\2\4\2\176"+
    "\2\4\13\0\2\4\1\176\1\4\1\176\3\4\1\176"+
    "\7\4\2\176\7\4\2\0\1\4\5\5\2\0\1\103"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\5\5\2\0"+
    "\1\u019e\5\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\6\5\1\u019f\10\5"+
    "\1\4\11\5\40\0\1\u01a0\110\0\1\u01a1\74\0\1\u01a2"+
    "\35\0\1\u01a3\55\0\1\u0158\111\0\1\u01a4\104\0\1\u01a5"+
    "\110\0\1\u01a6\125\0\1\u01a7\113\0\1\u01a8\24\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\17\5\1\4\2\5"+
    "\1\u01a9\6\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\1\5\1\u01aa\15\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\1\272\5\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\1\5\1\u01ab"+
    "\4\5\13\0\17\5\1\4\11\5\2\0\1\4\5\5"+
    "\2\0\1\103\3\5\1\0\1\5\1\0\2\5\3\0"+
    "\5\5\2\0\6\5\13\0\6\5\1\u01ac\10\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\2\5\1\u01ad"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\17\5\1\4\11\5\41\0\1\u0125\105\0\1\u01ae"+
    "\132\0\1\u01af\62\0\1\u01b0\103\0\1\u01b1\143\0\1\u0125"+
    "\55\0\1\u0184\102\0\1\u0184\106\0\1\u01b2\53\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\1\5\1\u01b3\15\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\3\5\1\170\1\5"+
    "\2\0\6\5\13\0\17\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\6\5\1\u01b4\10\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\1\5\1\u01b5\15\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\1\5\1\u01b6\4\5\13\0\17\5"+
    "\1\4\11\5\31\0\1\u01b7\114\0\1\u01b8\104\0\1\u01b9"+
    "\110\0\1\u01ba\135\0\1\u01bb\22\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\6\5\1\u01bc\10\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\7\5"+
    "\1\u01bd\7\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\1\5\1\u0115\1\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\6\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\3\5\1\u01be\2\5"+
    "\13\0\17\5\1\4\11\5\37\0\1\u01bf\110\0\1\u01ba"+
    "\105\0\1\u0125\126\0\1\u0125\105\0\1\u01c0\31\0\1\4"+
    "\5\5\2\0\1\103\1\5\1\u01c1\1\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\17\5"+
    "\1\4\11\5\2\0\1\4\5\5\2\0\1\103\3\5"+
    "\1\0\1\5\1\0\2\5\3\0\5\5\2\0\6\5"+
    "\13\0\6\5\1\u01c2\10\5\1\4\11\5\2\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\1\5\1\u01c3\4\5\13\0\17\5"+
    "\1\4\11\5\35\0\1\u01a5\133\0\1\u0184\26\0\1\4"+
    "\5\5\2\0\1\103\3\5\1\0\1\5\1\0\2\5"+
    "\3\0\5\5\2\0\1\u01c4\5\5\13\0\17\5\1\4"+
    "\11\5\2\0\1\4\5\5\2\0\1\103\3\5\1\0"+
    "\1\5\1\0\2\5\3\0\5\5\2\0\1\u01c5\5\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\14\5\1\u0115\2\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\2\5\1\u0113\3\5"+
    "\13\0\17\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\6\5\13\0\6\5\1\u01c6\10\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\6\5\13\0\12\5"+
    "\1\u01c7\4\5\1\4\11\5\2\0\1\4\5\5\2\0"+
    "\1\103\3\5\1\0\1\5\1\0\2\5\3\0\5\5"+
    "\2\0\2\5\1\u01c8\3\5\13\0\17\5\1\4\11\5"+
    "\2\0\1\4\5\5\2\0\1\103\3\5\1\0\1\5"+
    "\1\0\2\5\3\0\5\5\2\0\5\5\1\u0115\13\0"+
    "\17\5\1\4\11\5\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30317];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\5\1\1\11\4\1\1\11\15\1\2\11\3\1"+
    "\1\11\23\1\1\11\5\1\1\11\21\1\1\11\1\0"+
    "\12\1\1\11\22\1\1\0\33\1\1\11\3\0\1\11"+
    "\3\0\1\11\16\0\2\1\1\0\3\1\1\11\13\1"+
    "\1\11\54\1\27\0\6\1\1\11\35\1\14\0\1\11"+
    "\15\0\30\1\1\0\1\1\1\0\1\1\27\0\20\1"+
    "\22\0\11\1\2\0\1\1\6\0\6\1\11\0\5\1"+
    "\5\0\4\1\5\0\3\1\2\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[456];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public PineDLTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PineDLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PineDLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 35: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 36: break;
        case 25: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 37: break;
        case 22: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 38: break;
        case 29: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 39: break;
        case 20: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 40: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 41: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 42: break;
        case 26: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 43: break;
        case 32: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.VARIABLE); start = zzMarkedPos;
          }
        case 44: break;
        case 15: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 45: break;
        case 21: 
          { addToken(Token.RESERVED_WORD);
          }
        case 46: break;
        case 10: 
          { addToken(Token.VARIABLE); /* FIXME:  Add token type to Token? */
          }
        case 47: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 48: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 49: break;
        case 31: 
          { addToken(Token.FUNCTION);
          }
        case 50: break;
        case 4: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 51: break;
        case 6: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 52: break;
        case 28: 
          { addToken(Token.DATA_TYPE);
          }
        case 53: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 54: break;
        case 17: 
          { addToken(Token.ERROR_CHAR);
          }
        case 55: break;
        case 30: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 56: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 57: break;
        case 27: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 58: break;
        case 18: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 59: break;
        case 33: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 60: break;
        case 23: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 61: break;
        case 19: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 62: break;
        case 14: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 63: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 64: break;
        case 8: 
          { addToken(Token.OPERATOR);
          }
        case 65: break;
        case 24: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.PREPROCESSOR); start = zzMarkedPos;
          }
        case 66: break;
        case 11: 
          { 
          }
        case 67: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 457: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 458: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 459: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

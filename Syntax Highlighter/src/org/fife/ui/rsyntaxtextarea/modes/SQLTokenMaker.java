/* The following code was generated by JFlex 1.4.1 on 11/15/07 3:35 PM */

/*
 * 02/15/2005
 *
 * SQLTokenMaker.java - Scanner for SQL.
 * Copyright (C) 2005 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class generates tokens representing a text stream as SQL.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated SQLTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class SQLTokenMaker extends AbstractJFlexTokenMaker implements TokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;
  public static final int MLC = 3;
  public static final int CHAR = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\1\25\0\1\40\1\0\1\55\4\0\1\56\2\14"+
    "\1\12\1\10\1\0\1\11\1\16\1\13\1\3\1\50\1\50\1\3"+
    "\1\45\3\3\1\46\1\3\1\15\1\0\1\7\1\6\1\5\2\0"+
    "\1\20\1\36\1\30\1\21\1\17\1\44\1\47\1\41\1\33\1\51"+
    "\1\52\1\22\1\34\1\25\1\32\1\42\1\53\1\24\1\27\1\23"+
    "\1\31\1\35\1\37\1\43\1\26\1\2\1\57\1\0\1\60\1\0"+
    "\1\54\1\0\1\20\1\36\1\30\1\21\1\17\1\44\1\47\1\41"+
    "\1\33\1\51\1\52\1\22\1\34\1\25\1\32\1\42\1\53\1\24"+
    "\1\27\1\23\1\31\1\35\1\37\1\43\1\26\1\2\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\4\5\5\1\6"+
    "\1\1\1\7\27\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\13\1\16\1\17\1\13\1\20\1\13\1\0"+
    "\1\21\1\22\4\1\1\23\42\1\1\23\5\1\2\23"+
    "\7\1\1\23\21\1\1\24\1\13\1\25\1\7\1\0"+
    "\4\1\1\26\44\1\1\0\4\1\1\23\4\1\1\23"+
    "\1\1\1\0\1\1\1\23\21\1\1\23\4\1\1\23"+
    "\4\1\1\23\17\1\1\23\2\1\1\0\10\1\1\0"+
    "\1\1\1\0\20\1\1\23\5\1\1\23\10\1\1\23"+
    "\2\1\1\0\4\1\1\23\3\1\1\0\1\1\1\0"+
    "\3\1\1\23\20\1\1\0\3\1\2\0\11\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\23\2\0\3\1\1\23"+
    "\2\1\1\0\1\1\1\0\1\23\1\1\3\0\2\1"+
    "\3\0\1\1\6\0\1\26\3\0\1\26\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\304\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\304\0\u01b9\0\u01ea\0\u021b\0\304\0\u024c"+
    "\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\304\0\304\0\u0715\0\u0746\0\304\0\u0777\0\u07a8\0\304"+
    "\0\u07d9\0\u080a\0\304\0\u083b\0\u086c\0\u089d\0\304\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076"+
    "\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\365\0\u119c\0\u11cd"+
    "\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355"+
    "\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd"+
    "\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\304"+
    "\0\304\0\304\0\u1665\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729"+
    "\0\365\0\u175a\0\u0992\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f"+
    "\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7"+
    "\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f"+
    "\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7"+
    "\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f"+
    "\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7"+
    "\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f"+
    "\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307"+
    "\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f"+
    "\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617"+
    "\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f"+
    "\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927"+
    "\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf"+
    "\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37"+
    "\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf"+
    "\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u15d2\0\u2f16"+
    "\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u0c40\0\u300b\0\u303c\0\u306d"+
    "\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162\0\u16f8\0\u3193\0\u31c4"+
    "\0\u31f5\0\u20bb\0\u3226\0\u3257\0\u3288\0\u2d8e\0\u32b9\0\u32ea"+
    "\0\u331b\0\u334c\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472"+
    "\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u3567\0\u3598\0\u35c9\0\u35fa"+
    "\0\u362b\0\u365c\0\u368d\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782"+
    "\0\u37b3\0\u37e4\0\u3815\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a"+
    "\0\u393b\0\u396c\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92"+
    "\0\u3ac3\0\u3af4\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a"+
    "\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2"+
    "\0\u3dd3\0\u3e04\0\304\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9"+
    "\0\u3f2a\0\u3f5b\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081"+
    "\0\u40b2\0\u40e3\0\u4114\0\304\0\u4145\0\u4176\0\u41a7\0\u41d8"+
    "\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd\0\u42fe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\13\1\15\1\13\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\11\1\43\1\44\1\7\1\45\2\10\1\46\1\10"+
    "\1\47\1\50\1\7\1\5\1\51\1\52\1\53\1\5"+
    "\1\54\1\55\53\54\1\56\3\54\1\57\1\60\54\57"+
    "\1\61\2\57\1\62\1\63\10\62\1\64\46\62\63\0"+
    "\2\7\13\0\21\7\1\0\13\7\10\0\1\10\12\0"+
    "\1\21\1\65\25\0\2\10\1\0\1\10\14\0\1\11"+
    "\33\0\1\11\26\0\1\13\57\0\2\13\63\0\1\66"+
    "\61\0\1\67\50\0\1\7\14\0\21\7\1\0\4\7"+
    "\2\0\1\7\1\0\3\7\10\0\1\21\13\0\1\65"+
    "\25\0\2\21\1\0\1\21\12\0\2\7\13\0\21\7"+
    "\1\0\2\7\1\70\10\7\7\0\2\7\13\0\2\7"+
    "\1\71\1\72\2\7\1\73\1\7\1\74\1\7\1\75"+
    "\3\7\1\76\2\7\1\0\13\7\7\0\2\7\13\0"+
    "\1\77\1\100\3\7\1\101\5\7\1\102\1\103\4\7"+
    "\1\0\13\7\7\0\2\7\13\0\1\104\12\7\1\105"+
    "\1\106\4\7\1\0\13\7\7\0\2\7\13\0\1\107"+
    "\1\110\3\7\1\111\5\7\1\112\1\113\4\7\1\0"+
    "\13\7\7\0\2\7\13\0\1\114\13\7\1\115\4\7"+
    "\1\0\13\7\7\0\2\7\13\0\12\7\1\116\1\117"+
    "\5\7\1\0\13\7\7\0\2\7\13\0\1\120\20\7"+
    "\1\0\13\7\7\0\2\7\13\0\1\121\3\7\1\122"+
    "\2\7\1\123\2\7\1\124\1\125\1\126\1\127\3\7"+
    "\1\0\1\130\12\7\7\0\2\7\13\0\12\7\1\131"+
    "\1\132\5\7\1\0\1\133\12\7\7\0\2\7\13\0"+
    "\6\7\1\134\12\7\1\0\1\7\1\135\11\7\7\0"+
    "\2\7\13\0\3\7\1\136\1\7\1\137\1\140\2\7"+
    "\1\141\1\142\5\7\1\143\1\0\1\7\1\144\11\7"+
    "\7\0\2\7\13\0\6\7\1\145\1\7\1\146\4\7"+
    "\1\112\3\7\1\0\6\7\1\147\4\7\7\0\2\7"+
    "\13\0\1\150\1\151\11\7\1\152\1\153\4\7\1\0"+
    "\13\7\7\0\2\7\13\0\1\7\1\154\17\7\1\0"+
    "\13\7\7\0\2\7\13\0\1\155\6\7\1\156\3\7"+
    "\1\157\1\160\4\7\1\0\13\7\7\0\2\7\13\0"+
    "\14\7\1\161\4\7\1\0\1\162\12\7\7\0\2\7"+
    "\13\0\1\7\1\163\17\7\1\0\13\7\7\0\2\7"+
    "\13\0\1\164\1\165\3\7\1\166\5\7\1\167\5\7"+
    "\1\0\13\7\7\0\2\7\13\0\3\7\1\170\1\7"+
    "\1\171\5\7\1\172\5\7\1\0\13\7\7\0\2\7"+
    "\13\0\1\173\4\7\1\174\4\7\1\175\6\7\1\0"+
    "\13\7\7\0\2\7\13\0\13\7\1\176\5\7\1\0"+
    "\13\7\7\0\2\7\13\0\1\177\20\7\1\0\13\7"+
    "\5\0\60\53\1\200\1\54\1\0\53\54\1\0\3\54"+
    "\55\0\1\201\3\0\1\57\1\0\54\57\1\0\2\57"+
    "\56\0\1\201\2\0\1\62\1\0\10\62\1\0\46\62"+
    "\13\0\1\202\50\0\1\203\4\0\2\204\33\0\2\203"+
    "\1\0\1\203\10\0\1\66\1\0\57\66\2\0\2\7"+
    "\13\0\4\7\1\205\7\7\1\206\4\7\1\0\13\7"+
    "\7\0\2\7\13\0\2\7\1\146\16\7\1\0\13\7"+
    "\7\0\2\7\13\0\3\7\1\146\1\207\14\7\1\0"+
    "\13\7\7\0\2\7\13\0\2\7\1\146\4\7\1\146"+
    "\11\7\1\0\13\7\7\0\2\7\13\0\11\7\1\146"+
    "\7\7\1\0\13\7\7\0\2\7\13\0\4\7\1\210"+
    "\14\7\1\0\13\7\7\0\2\7\13\0\1\7\1\146"+
    "\17\7\1\0\6\7\1\211\4\7\7\0\2\7\13\0"+
    "\3\7\1\212\4\7\1\213\10\7\1\0\13\7\7\0"+
    "\2\7\13\0\4\7\1\214\14\7\1\0\13\7\7\0"+
    "\2\7\13\0\13\7\1\112\5\7\1\0\13\7\7\0"+
    "\2\7\13\0\12\7\1\215\6\7\1\0\13\7\7\0"+
    "\2\7\13\0\10\7\1\216\10\7\1\0\13\7\7\0"+
    "\2\7\13\0\16\7\1\217\2\7\1\0\3\7\1\117"+
    "\7\7\7\0\2\7\13\0\6\7\1\220\11\7\1\221"+
    "\1\0\6\7\1\222\4\7\7\0\2\7\13\0\21\7"+
    "\1\0\11\7\1\223\1\7\7\0\2\7\13\0\21\7"+
    "\1\0\2\7\1\117\10\7\7\0\2\7\13\0\17\7"+
    "\1\224\1\7\1\0\13\7\7\0\2\7\13\0\1\7"+
    "\1\225\12\7\1\226\4\7\1\0\13\7\7\0\2\7"+
    "\13\0\21\7\1\0\1\7\1\146\11\7\7\0\2\7"+
    "\13\0\15\7\1\227\3\7\1\0\13\7\7\0\2\7"+
    "\13\0\1\7\1\230\17\7\1\0\3\7\1\231\7\7"+
    "\7\0\2\7\13\0\21\7\1\0\6\7\1\232\4\7"+
    "\7\0\2\7\13\0\3\7\1\230\11\7\1\233\3\7"+
    "\1\0\13\7\7\0\2\7\13\0\4\7\1\146\14\7"+
    "\1\0\13\7\7\0\2\7\13\0\10\7\1\234\10\7"+
    "\1\0\13\7\7\0\2\7\13\0\3\7\1\235\1\146"+
    "\3\7\1\236\10\7\1\0\13\7\7\0\2\7\13\0"+
    "\2\7\1\237\2\7\1\240\13\7\1\0\13\7\7\0"+
    "\2\7\13\0\10\7\1\241\10\7\1\0\13\7\7\0"+
    "\2\7\13\0\15\7\1\146\1\7\1\242\1\7\1\0"+
    "\13\7\7\0\2\7\13\0\15\7\1\223\3\7\1\0"+
    "\13\7\7\0\2\7\13\0\6\7\1\243\12\7\1\0"+
    "\13\7\7\0\2\7\13\0\1\7\1\244\17\7\1\0"+
    "\13\7\7\0\2\7\13\0\13\7\1\245\5\7\1\0"+
    "\13\7\7\0\2\7\13\0\5\7\1\246\13\7\1\0"+
    "\13\7\7\0\2\7\13\0\3\7\1\247\2\7\1\250"+
    "\3\7\1\251\6\7\1\0\13\7\7\0\2\7\13\0"+
    "\1\7\1\252\17\7\1\0\13\7\7\0\2\7\13\0"+
    "\14\7\1\253\4\7\1\0\13\7\7\0\2\7\13\0"+
    "\2\7\1\254\16\7\1\0\1\7\1\221\11\7\7\0"+
    "\2\7\13\0\1\255\20\7\1\0\13\7\7\0\2\7"+
    "\13\0\2\7\1\207\16\7\1\0\13\7\7\0\2\7"+
    "\13\0\21\7\1\256\13\7\7\0\2\7\13\0\4\7"+
    "\1\257\14\7\1\0\13\7\7\0\2\7\13\0\4\7"+
    "\1\207\14\7\1\0\13\7\7\0\2\7\13\0\6\7"+
    "\1\260\12\7\1\0\13\7\7\0\2\7\13\0\4\7"+
    "\1\261\14\7\1\0\13\7\7\0\2\7\13\0\2\7"+
    "\1\262\1\7\1\263\1\7\1\207\1\7\1\264\10\7"+
    "\1\0\13\7\7\0\2\7\13\0\6\7\1\265\12\7"+
    "\1\0\13\7\7\0\2\7\13\0\15\7\1\266\3\7"+
    "\1\0\13\7\7\0\2\7\13\0\21\7\1\0\2\7"+
    "\1\146\10\7\7\0\2\7\13\0\2\7\1\146\3\7"+
    "\1\50\12\7\1\0\13\7\7\0\2\7\13\0\6\7"+
    "\1\146\12\7\1\0\13\7\7\0\2\7\13\0\3\7"+
    "\1\267\1\7\1\270\13\7\1\0\13\7\7\0\2\7"+
    "\13\0\4\7\1\271\14\7\1\0\13\7\7\0\2\7"+
    "\13\0\4\7\1\223\14\7\1\272\13\7\7\0\2\7"+
    "\13\0\13\7\1\273\5\7\1\0\13\7\7\0\2\7"+
    "\13\0\4\7\1\274\1\7\1\275\12\7\1\0\13\7"+
    "\7\0\2\7\13\0\4\7\1\276\14\7\1\0\13\7"+
    "\7\0\2\7\13\0\1\277\20\7\1\0\13\7\7\0"+
    "\2\7\13\0\16\7\1\240\2\7\1\0\13\7\7\0"+
    "\2\7\13\0\5\7\1\300\13\7\1\0\13\7\7\0"+
    "\2\7\13\0\5\7\1\301\13\7\1\0\13\7\7\0"+
    "\2\7\13\0\14\7\1\302\4\7\1\0\13\7\7\0"+
    "\2\7\13\0\10\7\1\303\10\7\1\0\13\7\7\0"+
    "\2\7\13\0\13\7\1\304\5\7\1\0\13\7\7\0"+
    "\2\7\13\0\13\7\1\305\5\7\1\0\13\7\7\0"+
    "\2\7\13\0\5\7\1\306\13\7\1\0\13\7\7\0"+
    "\2\7\13\0\6\7\1\307\12\7\1\0\13\7\7\0"+
    "\2\7\13\0\13\7\1\310\5\7\1\0\13\7\7\0"+
    "\2\7\13\0\14\7\1\71\4\7\1\0\13\7\7\0"+
    "\2\7\13\0\14\7\1\153\4\7\1\0\13\7\7\0"+
    "\2\7\13\0\7\7\1\146\11\7\1\0\13\7\10\0"+
    "\1\203\41\0\2\203\1\0\1\203\12\0\2\7\13\0"+
    "\5\7\1\311\13\7\1\0\13\7\7\0\2\7\13\0"+
    "\10\7\1\312\10\7\1\0\13\7\7\0\2\7\13\0"+
    "\1\313\20\7\1\0\13\7\7\0\2\7\13\0\13\7"+
    "\1\314\5\7\1\0\13\7\7\0\2\7\13\0\1\315"+
    "\20\7\1\0\13\7\7\0\2\7\13\0\1\316\1\317"+
    "\17\7\1\0\13\7\7\0\2\7\13\0\17\7\1\320"+
    "\1\7\1\0\13\7\7\0\2\7\13\0\1\7\1\321"+
    "\2\7\1\322\14\7\1\0\13\7\7\0\2\7\13\0"+
    "\1\230\20\7\1\0\13\7\7\0\2\7\13\0\21\7"+
    "\1\0\6\7\1\323\4\7\7\0\2\7\13\0\1\324"+
    "\20\7\1\0\13\7\7\0\2\7\13\0\14\7\1\325"+
    "\4\7\1\0\13\7\7\0\2\7\13\0\1\146\20\7"+
    "\1\0\13\7\7\0\2\7\13\0\3\7\1\326\15\7"+
    "\1\0\13\7\7\0\2\7\13\0\6\7\1\327\12\7"+
    "\1\0\13\7\7\0\2\7\13\0\15\7\1\211\3\7"+
    "\1\0\13\7\7\0\2\7\13\0\1\330\20\7\1\0"+
    "\13\7\7\0\2\7\13\0\3\7\1\146\15\7\1\0"+
    "\13\7\7\0\2\7\13\0\1\331\20\7\1\0\13\7"+
    "\7\0\2\7\13\0\21\7\1\0\1\117\12\7\7\0"+
    "\2\7\13\0\1\332\16\7\1\207\1\7\1\0\13\7"+
    "\7\0\2\7\13\0\6\7\1\266\12\7\1\0\13\7"+
    "\7\0\2\7\13\0\1\333\20\7\1\0\13\7\7\0"+
    "\2\7\13\0\10\7\1\334\10\7\1\0\13\7\7\0"+
    "\2\7\13\0\1\335\20\7\1\0\13\7\7\0\2\7"+
    "\13\0\14\7\1\336\4\7\1\0\13\7\7\0\2\7"+
    "\13\0\4\7\1\337\14\7\1\0\13\7\7\0\2\7"+
    "\13\0\10\7\1\340\10\7\1\0\13\7\7\0\2\7"+
    "\13\0\21\7\1\0\6\7\1\320\4\7\7\0\2\7"+
    "\13\0\3\7\1\341\15\7\1\0\13\7\7\0\2\7"+
    "\13\0\5\7\1\117\13\7\1\0\13\7\7\0\2\7"+
    "\13\0\5\7\1\342\13\7\1\0\13\7\7\0\2\7"+
    "\13\0\12\7\1\343\6\7\1\0\13\7\7\0\2\7"+
    "\13\0\10\7\1\344\1\345\4\7\1\346\2\7\1\0"+
    "\13\7\7\0\2\7\13\0\6\7\1\347\12\7\1\0"+
    "\13\7\7\0\2\7\13\0\5\7\1\350\13\7\1\0"+
    "\13\7\7\0\2\7\13\0\13\7\1\153\5\7\1\0"+
    "\12\7\1\351\7\0\2\7\13\0\1\7\1\315\17\7"+
    "\1\0\13\7\7\0\2\7\13\0\13\7\1\352\5\7"+
    "\1\0\13\7\47\0\1\353\20\0\2\7\13\0\1\354"+
    "\20\7\1\0\13\7\7\0\2\7\13\0\1\355\20\7"+
    "\1\0\13\7\7\0\2\7\13\0\14\7\1\356\4\7"+
    "\1\0\13\7\7\0\2\7\13\0\1\151\20\7\1\0"+
    "\13\7\7\0\2\7\13\0\1\357\12\7\1\146\5\7"+
    "\1\0\13\7\7\0\2\7\13\0\1\245\20\7\1\0"+
    "\13\7\7\0\2\7\13\0\13\7\1\277\5\7\1\0"+
    "\13\7\7\0\2\7\13\0\13\7\1\146\5\7\1\0"+
    "\13\7\7\0\2\7\13\0\12\7\1\360\6\7\1\0"+
    "\13\7\7\0\2\7\13\0\11\7\1\361\5\7\1\362"+
    "\1\7\1\0\1\7\1\146\11\7\7\0\2\7\13\0"+
    "\20\7\1\363\1\0\13\7\35\0\1\364\32\0\2\7"+
    "\13\0\3\7\1\365\15\7\1\0\13\7\7\0\2\7"+
    "\13\0\21\7\1\0\13\7\1\366\6\0\2\7\13\0"+
    "\1\7\1\367\17\7\1\0\13\7\7\0\2\7\13\0"+
    "\21\7\1\0\1\146\12\7\7\0\2\7\13\0\5\7"+
    "\1\223\13\7\1\0\13\7\7\0\2\7\13\0\11\7"+
    "\1\370\7\7\1\0\13\7\7\0\2\7\13\0\1\7"+
    "\1\371\17\7\1\0\13\7\7\0\2\7\13\0\15\7"+
    "\1\275\3\7\1\0\13\7\7\0\2\7\13\0\14\7"+
    "\1\372\4\7\1\0\13\7\7\0\2\7\13\0\1\7"+
    "\1\373\17\7\1\0\13\7\7\0\2\7\13\0\15\7"+
    "\1\146\3\7\1\0\13\7\7\0\2\7\13\0\1\374"+
    "\20\7\1\0\13\7\7\0\2\7\13\0\1\375\20\7"+
    "\1\0\13\7\7\0\2\7\13\0\12\7\1\112\6\7"+
    "\1\0\13\7\7\0\2\7\13\0\1\7\1\376\17\7"+
    "\1\0\13\7\7\0\2\7\13\0\4\7\1\377\14\7"+
    "\1\0\13\7\7\0\2\7\13\0\5\7\1\146\13\7"+
    "\1\0\13\7\7\0\2\7\13\0\14\7\1\u0100\4\7"+
    "\1\0\13\7\7\0\2\7\13\0\4\7\1\223\14\7"+
    "\1\0\13\7\7\0\2\7\13\0\4\7\1\u0101\14\7"+
    "\1\0\13\7\7\0\2\7\13\0\17\7\1\u0102\1\7"+
    "\1\0\13\7\7\0\2\7\13\0\3\7\1\223\15\7"+
    "\1\0\13\7\7\0\2\7\13\0\3\7\1\u0103\15\7"+
    "\1\0\13\7\7\0\2\7\13\0\14\7\1\u0104\4\7"+
    "\1\0\13\7\7\0\2\7\13\0\4\7\1\u0105\12\7"+
    "\1\362\1\7\1\0\13\7\7\0\2\7\13\0\5\7"+
    "\1\211\13\7\1\0\13\7\7\0\2\7\13\0\11\7"+
    "\1\u0106\7\7\1\0\13\7\7\0\2\7\13\0\1\u0107"+
    "\20\7\1\0\13\7\7\0\2\7\13\0\10\7\1\u0108"+
    "\10\7\1\0\13\7\7\0\2\7\13\0\10\7\1\u0109"+
    "\10\7\1\0\13\7\7\0\2\7\13\0\5\7\1\u010a"+
    "\13\7\1\0\13\7\7\0\2\7\13\0\5\7\1\u010b"+
    "\13\7\1\0\13\7\7\0\2\7\13\0\11\7\1\117"+
    "\7\7\1\0\13\7\7\0\2\7\13\0\14\7\1\u010c"+
    "\4\7\1\0\13\7\7\0\2\7\13\0\16\7\1\u010d"+
    "\2\7\1\0\13\7\7\0\2\7\13\0\6\7\1\u010e"+
    "\12\7\1\0\13\7\7\0\2\7\13\0\1\u010f\20\7"+
    "\1\0\13\7\7\0\2\7\13\0\4\7\1\u0110\14\7"+
    "\1\0\13\7\7\0\2\7\13\0\3\7\1\u0111\15\7"+
    "\1\0\13\7\7\0\2\7\13\0\1\u0112\20\7\1\0"+
    "\13\7\7\0\2\7\13\0\15\7\1\153\3\7\1\0"+
    "\13\7\7\0\2\7\13\0\4\7\1\u0113\14\7\1\0"+
    "\13\7\7\0\2\7\13\0\1\7\1\u0114\17\7\1\0"+
    "\13\7\7\0\2\7\13\0\1\u0115\20\7\1\0\13\7"+
    "\7\0\2\7\13\0\4\7\1\u0116\14\7\1\0\13\7"+
    "\7\0\2\7\13\0\1\7\1\u0117\17\7\1\0\13\7"+
    "\1\366\6\0\2\7\13\0\12\7\1\223\6\7\1\0"+
    "\13\7\7\0\2\7\13\0\17\7\1\u0118\1\7\1\0"+
    "\13\7\40\0\1\u0119\27\0\2\7\13\0\4\7\1\u011a"+
    "\14\7\1\0\13\7\7\0\2\7\13\0\5\7\1\u011b"+
    "\13\7\1\0\13\7\7\0\2\7\13\0\13\7\1\u011c"+
    "\5\7\1\0\13\7\7\0\2\7\13\0\21\7\1\0"+
    "\6\7\1\u011d\4\7\7\0\2\7\13\0\1\u011e\20\7"+
    "\1\0\13\7\7\0\2\7\13\0\21\7\1\0\1\u011f"+
    "\12\7\7\0\2\7\13\0\14\7\1\u0120\4\7\1\0"+
    "\13\7\7\0\2\7\13\0\1\u0121\20\7\1\0\13\7"+
    "\31\0\1\u0122\36\0\2\7\13\0\1\u0123\20\7\1\0"+
    "\13\7\27\0\1\u0124\40\0\2\7\13\0\5\7\1\177"+
    "\13\7\1\0\13\7\7\0\2\7\13\0\1\u0125\20\7"+
    "\1\0\13\7\7\0\2\7\13\0\15\7\1\u0126\3\7"+
    "\1\0\13\7\7\0\2\7\13\0\4\7\1\u0127\14\7"+
    "\1\0\13\7\7\0\2\7\13\0\4\7\1\u0128\14\7"+
    "\1\0\13\7\7\0\2\7\13\0\14\7\1\u0129\4\7"+
    "\1\0\13\7\7\0\2\7\13\0\5\7\1\u0106\13\7"+
    "\1\0\13\7\7\0\2\7\13\0\11\7\1\u012a\7\7"+
    "\1\0\13\7\7\0\2\7\13\0\10\7\1\146\10\7"+
    "\1\0\13\7\7\0\2\7\13\0\6\7\1\u012b\12\7"+
    "\1\0\13\7\7\0\2\7\13\0\14\7\1\125\4\7"+
    "\1\0\13\7\7\0\2\7\13\0\1\7\1\u012c\17\7"+
    "\1\0\13\7\7\0\2\7\13\0\3\7\1\u012d\15\7"+
    "\1\0\13\7\7\0\2\7\13\0\6\7\1\u012e\12\7"+
    "\1\0\13\7\7\0\2\7\13\0\1\107\20\7\1\0"+
    "\13\7\7\0\2\7\13\0\1\7\1\230\17\7\1\0"+
    "\13\7\7\0\2\7\13\0\3\7\1\u012f\15\7\1\0"+
    "\3\7\1\u0130\7\7\7\0\2\7\13\0\4\7\1\u0131"+
    "\14\7\1\0\13\7\7\0\2\7\13\0\1\u0132\20\7"+
    "\1\0\13\7\7\0\2\7\13\0\14\7\1\213\4\7"+
    "\1\0\13\7\7\0\2\7\13\0\13\7\1\u0133\5\7"+
    "\1\0\13\7\7\0\2\7\13\0\21\7\1\0\6\7"+
    "\1\146\4\7\7\0\2\7\13\0\15\7\1\u0134\3\7"+
    "\1\0\13\7\7\0\2\7\13\0\5\7\1\u0135\13\7"+
    "\1\0\13\7\7\0\2\7\13\0\14\7\1\u0125\4\7"+
    "\1\0\13\7\7\0\2\7\13\0\6\7\1\u0136\12\7"+
    "\1\0\13\7\7\0\2\7\13\0\5\7\1\u0137\13\7"+
    "\1\0\13\7\7\0\2\7\13\0\4\7\1\u0138\14\7"+
    "\1\0\13\7\7\0\2\7\13\0\5\7\1\u012a\13\7"+
    "\1\0\13\7\7\0\2\7\13\0\11\7\1\142\7\7"+
    "\1\0\13\7\7\0\2\7\13\0\21\7\1\0\10\7"+
    "\1\235\2\7\42\0\1\u0139\25\0\2\7\13\0\1\7"+
    "\1\u013a\17\7\1\0\13\7\7\0\2\7\13\0\6\7"+
    "\1\u013b\12\7\1\0\13\7\7\0\2\7\13\0\1\u013c"+
    "\20\7\1\0\13\7\7\0\2\7\13\0\1\7\1\313"+
    "\17\7\1\0\13\7\7\0\2\7\13\0\6\7\1\275"+
    "\12\7\1\0\13\7\7\0\2\7\13\0\1\153\20\7"+
    "\1\0\13\7\24\0\1\u013d\43\0\2\7\13\0\1\7"+
    "\1\153\17\7\1\0\13\7\24\0\1\u013e\43\0\2\7"+
    "\13\0\6\7\1\117\12\7\1\0\13\7\7\0\2\7"+
    "\13\0\1\u013f\20\7\1\0\13\7\7\0\2\7\13\0"+
    "\14\7\1\u0140\4\7\1\0\13\7\7\0\2\7\13\0"+
    "\21\7\1\0\4\7\2\146\5\7\7\0\2\7\13\0"+
    "\21\7\1\0\6\7\1\153\4\7\7\0\2\7\13\0"+
    "\4\7\1\211\14\7\1\0\13\7\7\0\2\7\13\0"+
    "\11\7\1\u0141\7\7\1\0\13\7\7\0\2\7\13\0"+
    "\10\7\1\223\10\7\1\0\13\7\7\0\2\7\13\0"+
    "\13\7\1\u0142\5\7\1\0\13\7\7\0\2\7\13\0"+
    "\11\7\1\u0143\7\7\1\0\13\7\7\0\2\7\13\0"+
    "\1\7\1\u0144\17\7\1\0\13\7\7\0\2\7\13\0"+
    "\13\7\1\u0145\5\7\1\0\13\7\7\0\2\7\13\0"+
    "\1\7\1\u0146\17\7\1\0\13\7\7\0\2\7\13\0"+
    "\6\7\1\u0147\12\7\1\0\13\7\7\0\2\7\13\0"+
    "\6\7\1\u0134\12\7\1\0\13\7\7\0\2\7\13\0"+
    "\21\7\1\0\13\7\1\u0148\6\0\2\7\13\0\14\7"+
    "\1\u0149\4\7\1\0\13\7\7\0\2\7\13\0\4\7"+
    "\1\u014a\4\7\1\177\7\7\1\0\13\7\7\0\2\7"+
    "\13\0\1\7\1\u0111\17\7\1\0\13\7\7\0\2\7"+
    "\13\0\1\u014b\20\7\1\0\13\7\37\0\1\u014c\30\0"+
    "\2\7\13\0\11\7\1\u014d\7\7\1\0\13\7\7\0"+
    "\2\7\13\0\21\7\1\u014e\13\7\7\0\2\7\13\0"+
    "\5\7\1\u014f\13\7\1\0\13\7\25\0\1\u0150\65\0"+
    "\1\u0151\35\0\2\7\13\0\4\7\1\u0152\14\7\1\0"+
    "\13\7\7\0\2\7\13\0\13\7\1\u0153\5\7\1\0"+
    "\13\7\7\0\2\7\13\0\5\7\1\u0154\13\7\1\0"+
    "\13\7\7\0\2\7\13\0\20\7\1\146\1\0\13\7"+
    "\7\0\2\7\13\0\4\7\1\u0155\14\7\1\0\13\7"+
    "\7\0\2\7\13\0\4\7\1\u0156\14\7\1\0\13\7"+
    "\7\0\2\7\13\0\5\7\1\305\13\7\1\0\13\7"+
    "\7\0\2\7\13\0\15\7\1\112\3\7\1\0\13\7"+
    "\7\0\2\7\13\0\11\7\1\u0157\7\7\1\0\13\7"+
    "\36\0\1\u0158\31\0\2\7\13\0\6\7\1\u0159\12\7"+
    "\1\0\13\7\7\0\2\7\13\0\21\7\1\0\13\7"+
    "\1\u015a\6\0\2\7\13\0\6\7\1\u012f\12\7\1\0"+
    "\13\7\30\0\1\u015b\37\0\2\7\13\0\11\7\1\u015c"+
    "\7\7\1\0\13\7\47\0\1\u015d\20\0\2\7\13\0"+
    "\21\7\1\0\4\7\1\146\2\7\1\146\3\7\30\0"+
    "\1\u015e\104\0\1\u015f\13\0\2\7\13\0\1\u0160\20\7"+
    "\1\0\13\7\7\0\2\7\13\0\6\7\1\211\12\7"+
    "\1\0\13\7\7\0\2\7\13\0\1\u0161\20\7\1\0"+
    "\13\7\7\0\2\7\13\0\5\7\1\u012d\13\7\1\0"+
    "\13\7\7\0\2\7\13\0\1\211\20\7\1\0\13\7"+
    "\7\0\2\7\13\0\1\377\20\7\1\0\13\7\34\0"+
    "\1\u0162\33\0\2\7\13\0\21\7\1\0\6\7\1\211"+
    "\4\7\26\0\1\u0163\1\0\1\u0164\5\0\1\u0158\31\0"+
    "\2\7\13\0\1\u0165\20\7\1\0\13\7\31\0\1\u0166"+
    "\53\0\1\u015b\64\0\1\u0167\37\0\2\7\13\0\5\7"+
    "\1\377\13\7\1\0\13\7\7\0\2\7\13\0\15\7"+
    "\1\370\3\7\1\0\13\7\24\0\1\u0168\61\0\1\u0169"+
    "\73\0\1\u016a\27\0\2\7\13\0\10\7\1\377\10\7"+
    "\1\0\13\7\40\0\1\u016b\66\0\1\u016c\43\0\1\u016c"+
    "\57\0\1\u016d\71\0\1\u016e\60\0\1\u016f\43\0\1\u016c"+
    "\60\0\1\u0170\61\0\1\u0171\67\0\1\u0172\55\0\1\u0173"+
    "\57\0\1\u0174\63\0\1\u015b\52\0\1\u0175\74\0\1\u0176"+
    "\66\0\1\u016c\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17199];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\4\1\1\11\3\1\1\11\31\1\2\11"+
    "\2\1\1\11\2\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\1\1\11\110\1\3\11\1\1\1\0\51\1\1\0"+
    "\13\1\1\0\60\1\1\0\10\1\1\0\1\1\1\0"+
    "\42\1\1\0\10\1\1\0\1\1\1\0\24\1\1\0"+
    "\3\1\2\0\11\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\2\0\6\1\1\0\1\1\1\0\1\11\1\1"+
    "\3\0\2\1\3\0\1\1\6\0\1\11\3\0\1\1"+
    "\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public SQLTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "--", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = STRING;
				start = text.offset;
				break;
			case Token.LITERAL_CHAR:
				state = CHAR;
				start = text.offset;
				break;
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SQLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SQLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { addToken(Token.PREPROCESSOR);
          }
        case 23: break;
        case 2: 
          { addNullToken(); return firstToken;
          }
        case 24: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 25: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 26: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 27: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
          }
        case 28: break;
        case 9: 
          { start = zzMarkedPos-1; yybegin(CHAR);
          }
        case 29: break;
        case 7: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 30: break;
        case 19: 
          { addToken(Token.RESERVED_WORD);
          }
        case 31: break;
        case 6: 
          { addToken(Token.SEPARATOR);
          }
        case 32: break;
        case 15: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_CHAR);
          }
        case 33: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 34: break;
        case 22: 
          { addToken(Token.FUNCTION);
          }
        case 35: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
          }
        case 36: break;
        case 17: 
          { addToken(Token.COMMENT_EOL);
          }
        case 37: break;
        case 8: 
          { start = zzMarkedPos-1; yybegin(STRING);
          }
        case 38: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 39: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 40: break;
        case 13: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 41: break;
        case 10: 
          { addToken(Token.ERROR_IDENTIFIER); addNullToken(); return firstToken;
          }
        case 42: break;
        case 11: 
          { 
          }
        case 43: break;
        case 16: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 375: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 376: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 377: break;
            case CHAR: {
              addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
            }
            case 378: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

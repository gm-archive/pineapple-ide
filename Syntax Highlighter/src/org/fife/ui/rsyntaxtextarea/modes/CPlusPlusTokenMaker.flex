/*
 * 11/19/2004
 *
 * CPlusPlusTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing it in C++.
 * Copyright (C) 2004 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * A parser for the C++ programming language.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated CPlusPlusTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.6
 *
 */
%%

%public
%class CPlusPlusTokenMaker
%extends AbstractJFlexTokenMaker
%implements TokenMaker
%unicode
%type org.fife.ui.rsyntaxtextarea.Token


%{


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public CPlusPlusTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}


%}

Letter			= [A-Za-z_]
Digit			= [0-9]
HexDigit			= {Digit}|[A-Fa-f]
OctalDigit		= [0-7]
Exponent			= [eE][+-]?{Digit}+

PreprocessorWord	= define|elif|else|endif|error|if|ifdef|ifndef|include|line|pragma|undef

Trigraph				= ("??="|"??("|"??)"|"??/"|"??'"|"??<"|"??>"|"??!"|"??-")

OctEscape1			= ([\\]{OctalDigit})
OctEscape2			= ([\\]{OctalDigit}{OctalDigit})
OctEscape3			= ([\\][0-3]{OctalDigit}{OctalDigit})
OctEscape				= ({OctEscape1}|{OctEscape2}|{OctEscape3})
HexEscape				= ([\\][xX]{HexDigit}{HexDigit})

AnyChrChr					= ([^\'\n\\])
Escape					= ([\\]([abfnrtv\'\"\?\\0]))
UnclosedCharLiteral			= ([\']({Escape}|{OctEscape}|{HexEscape}|{Trigraph}|{AnyChrChr}))
CharLiteral				= ({UnclosedCharLiteral}[\'])
ErrorUnclosedCharLiteral		= ([\'][^\'\n]*)
ErrorCharLiteral			= (([\'][\'])|{ErrorUnclosedCharLiteral}[\'])
AnyStrChr					= ([^\"\n\\])
FalseTrigraph				= (("?"(("?")*)[^\=\(\)\/\'\<\>\!\-\\\?\"\n])|("?"[\=\(\)\/\'\<\>\!\-]))
StringLiteral				= ([\"]((((("?")*)({Escape}|{OctEscape}|{HexEscape}|{Trigraph}))|{FalseTrigraph}|{AnyStrChr})*)(("?")*)[\"])
UnclosedStringLiteral		= ([\"]([\\].|[^\\\"])*[^\"]?)
ErrorStringLiteral			= ({UnclosedStringLiteral}[\"])


LineTerminator		= \n
WhiteSpace		= [ \t\f]

MLCBegin			= "/*"
MLCEnd			= "*/"
LineCommentBegin	= "//"

NonFloatSuffix		= (([uU][lL]?)|([lL][uU]?))
IntegerLiteral		= ({Digit}+{Exponent}?{NonFloatSuffix}?)
HexLiteral		= ("0"[xX]{HexDigit}+{NonFloatSuffix}?)
FloatLiteral		= ((({Digit}*[\.]{Digit}+)|({Digit}+[\.]{Digit}*)){Exponent}?[fFlL]?)
ErrorNumberFormat	= (({IntegerLiteral}|{HexLiteral}|{FloatLiteral}){NonSeparator}+)

NonSeparator		= ([^\t\f\r\n\ \(\)\{\}\[\]\;\,\.\=\>\<\!\~\?\:\+\-\*\/\&\|\^\%\"\']|"#")
Identifier		= ({Letter}[A-Za-z0-9_$]*)
ErrorIdentifier	= ({NonSeparator}+)

%state MLC

%%

/* Keywords */
<YYINITIAL> "auto"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "break"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "case"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "catch"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "class"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "const"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "const_cast"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "continue"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "default"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "delete"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "do"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "dynamic_cast"			{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "else"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "enum"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "explicit"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "extern"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "for"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "friend"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "goto"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "if"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "inline"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "mutable"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "namespace"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "new"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "operator"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "private"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "protected"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "public"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "register"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "reinterpret_cast"		{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "return"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "sizeof"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "static"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "static_cast"			{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "struct"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "switch"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "template"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "this"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "throw"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "try"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "typedef"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "typeid"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "typename"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "union"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "using"					{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "virtual"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "volatile"				{ addToken(Token.RESERVED_WORD); }
<YYINITIAL> "while"					{ addToken(Token.RESERVED_WORD); }

/* Boolean literals. */
<YYINITIAL> "true"					{ addToken(Token.LITERAL_BOOLEAN); }
<YYINITIAL> "false"					{ addToken(Token.LITERAL_BOOLEAN); }

/* Data types. */
<YYINITIAL> "bool"					{ addToken(Token.DATA_TYPE); }
<YYINITIAL> "char"					{ addToken(Token.DATA_TYPE); }
<YYINITIAL> "double"				{ addToken(Token.DATA_TYPE); }
<YYINITIAL> "float"					{ addToken(Token.DATA_TYPE); }
<YYINITIAL> "int"					{ addToken(Token.DATA_TYPE); }
<YYINITIAL> "long"					{ addToken(Token.DATA_TYPE); }
<YYINITIAL> "short"					{ addToken(Token.DATA_TYPE); }
<YYINITIAL> "signed"				{ addToken(Token.DATA_TYPE); }
<YYINITIAL> "unsigned"				{ addToken(Token.DATA_TYPE); }
<YYINITIAL> "void"					{ addToken(Token.DATA_TYPE); }
<YYINITIAL> "wchar_t"				{ addToken(Token.DATA_TYPE); }

/* Standard functions */
<YYINITIAL> "abort"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "abs"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "acos"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "asctime"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "asin"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "assert"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "atan2"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "atan"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "atexit"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "atof"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "atoi"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "atol"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "bsearch"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "calloc"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "ceil"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "clearerr"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "clock"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "cosh"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "cos"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "ctime"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "difftime"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "div"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "errno"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "exit"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "exp"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "fabs"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "fclose"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "feof"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "ferror"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "fflush"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "fgetc"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "fgetpos"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "fgets"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "floor"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "fmod"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "fopen"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "fprintf"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "fputc"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "fputs"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "fread"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "free"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "freopen"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "frexp"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "fscanf"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "fseek"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "fsetpos"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "ftell"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "fwrite"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "getchar"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "getc"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "getenv"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "gets"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "gmtime"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "isalnum"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "isalpha"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "iscntrl"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "isdigit"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "isgraph"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "islower"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "isprint"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "ispunct"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "isspace"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "isupper"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "isxdigit"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "labs"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "ldexp"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "ldiv"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "localeconv"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "localtime"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "log10"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "log"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "longjmp"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "malloc"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "mblen"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "mbstowcs"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "mbtowc"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "memchr"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "memcmp"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "memcpy"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "memmove"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "memset"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "mktime"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "modf"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "offsetof"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "perror"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "pow"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "printf"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "putchar"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "putc"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "puts"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "qsort"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "raise"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "rand"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "realloc"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "remove"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "rename"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "rewind"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "scanf"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "setbuf"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "setjmp"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "setlocale"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "setvbuf"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "setvbuf"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "signal"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "sinh"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "sin"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "sprintf"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "sqrt"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "srand"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "sscanf"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strcat"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strchr"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strcmp"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strcmp"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strcoll"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strcpy"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strcspn"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strerror"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strftime"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strlen"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strncat"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strncmp"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strncpy"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strpbrk"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strrchr"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strspn"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strstr"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strtod"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strtok"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strtol"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strtoul"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "strxfrm"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "system"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "tanh"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "tan"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "time"					{ addToken(Token.FUNCTION); }
<YYINITIAL> "tmpfile"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "tmpnam"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "tolower"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "toupper"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "ungetc"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "va_arg"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "va_end"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "va_start"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "vfprintf"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "vprintf"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "vsprintf"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "wcstombs"				{ addToken(Token.FUNCTION); }
<YYINITIAL> "wctomb"				{ addToken(Token.FUNCTION); }

/* Standard-defined macros. */
<YYINITIAL> "__DATE__"				{ addToken(Token.PREPROCESSOR); }
<YYINITIAL> "__TIME__"				{ addToken(Token.PREPROCESSOR); }
<YYINITIAL> "__FILE__"				{ addToken(Token.PREPROCESSOR); }
<YYINITIAL> "__LINE__"				{ addToken(Token.PREPROCESSOR); }
<YYINITIAL> "__STDC__"				{ addToken(Token.PREPROCESSOR); }

<YYINITIAL> {

	{LineTerminator}				{ addNullToken(); return firstToken; }

	{Identifier}					{ addToken(Token.IDENTIFIER); }

	{WhiteSpace}+					{ addToken(Token.WHITESPACE); }

	/* Preprocessor directives */
	"#"{WhiteSpace}*{PreprocessorWord}	{ addToken(Token.PREPROCESSOR); }

	/* String/Character Literals. */
	{CharLiteral}					{ addToken(Token.LITERAL_CHAR); }
	{UnclosedCharLiteral}			{ addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/ }
	{ErrorUnclosedCharLiteral}		{ addToken(Token.ERROR_CHAR); addNullToken(); return firstToken; }
	{ErrorCharLiteral}				{ addToken(Token.ERROR_CHAR); }
	{StringLiteral}				{ addToken(Token.LITERAL_STRING_DOUBLE_QUOTE); }
	{UnclosedStringLiteral}			{ addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken; }
	{ErrorStringLiteral}			{ addToken(Token.ERROR_STRING_DOUBLE); }

	/* Comment Literals. */
	{MLCBegin}					{ start = zzMarkedPos-2; yybegin(MLC); }
	{LineCommentBegin}.*			{ addToken(Token.COMMENT_EOL); addNullToken(); return firstToken; }

	/* Separators. */
	"("							{ addToken(Token.SEPARATOR); }
	")"							{ addToken(Token.SEPARATOR); }
	"["							{ addToken(Token.SEPARATOR); }
	"]"							{ addToken(Token.SEPARATOR); }
	"{"							{ addToken(Token.SEPARATOR); }
	"}"							{ addToken(Token.SEPARATOR); }

	/* Operators. */
	{Trigraph}					{ addToken(Token.OPERATOR); }
	"="							{ addToken(Token.OPERATOR); }
	"+"							{ addToken(Token.OPERATOR); }
	"-"							{ addToken(Token.OPERATOR); }
	"*"							{ addToken(Token.OPERATOR); }
	"/"							{ addToken(Token.OPERATOR); }
	"%"							{ addToken(Token.OPERATOR); }
	"~"							{ addToken(Token.OPERATOR); }
	"<"							{ addToken(Token.OPERATOR); }
	">"							{ addToken(Token.OPERATOR); }
	"<<"							{ addToken(Token.OPERATOR); }
	">>"							{ addToken(Token.OPERATOR); }
	"=="							{ addToken(Token.OPERATOR); }
	"+="							{ addToken(Token.OPERATOR); }
	"-="							{ addToken(Token.OPERATOR); }
	"*="							{ addToken(Token.OPERATOR); }
	"/="							{ addToken(Token.OPERATOR); }
	"%="							{ addToken(Token.OPERATOR); }
	">>="						{ addToken(Token.OPERATOR); }
	"<<="						{ addToken(Token.OPERATOR); }
	"^"							{ addToken(Token.OPERATOR); }
	"&"							{ addToken(Token.OPERATOR); }
	"&&"							{ addToken(Token.OPERATOR); }
	"|"							{ addToken(Token.OPERATOR); }
	"||"							{ addToken(Token.OPERATOR); }
	"?"							{ addToken(Token.OPERATOR); }
	":"							{ addToken(Token.OPERATOR); }
	","							{ addToken(Token.OPERATOR); }
	"!"							{ addToken(Token.OPERATOR); }
	"++"							{ addToken(Token.OPERATOR); }
	"--"							{ addToken(Token.OPERATOR); }
	"."							{ addToken(Token.OPERATOR); }
	","							{ addToken(Token.OPERATOR); }

	/* Numbers */
	{IntegerLiteral}				{ addToken(Token.LITERAL_NUMBER_DECIMAL_INT); }
	{HexLiteral}					{ addToken(Token.LITERAL_NUMBER_HEXADECIMAL); }
	{FloatLiteral}					{ addToken(Token.LITERAL_NUMBER_FLOAT); }
	{ErrorNumberFormat}				{ addToken(Token.ERROR_NUMBER_FORMAT); }

	/* Some lines will end in '\' to wrap an expression. */
	"\\"							{ addToken(Token.IDENTIFIER); }

	{ErrorIdentifier}				{ addToken(Token.ERROR_IDENTIFIER); }

	/* Other punctuation, we'll highlight it as "identifiers." */
	";"							{ addToken(Token.IDENTIFIER); }

	/* Ended with a line not in a string or comment. */
	<<EOF>>						{ addNullToken(); return firstToken; }

	/* Catch any other (unhandled) characters and flag them as bad. */
	.							{ addToken(Token.ERROR_IDENTIFIER); }

}

<MLC> {

	[^\n\*]+						{}
	\n							{ addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken; }
	{MLCEnd}						{ yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE); }
	\*							{}
	<<EOF>>						{ addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken; }

}
